{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "TokenBlacklist",
  "functions": [
    {
      "name": "update_roles",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "user",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "roles",
            "type": {
              "kind": "struct",
              "path": "types::roles::UserFlags",
              "fields": [
                {
                  "name": "is_admin",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "is_minter",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "is_blacklisted",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "update_roles"
      ]
    },
    {
      "name": "transfer_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15461801772204881930": {
            "error_kind": "string",
            "string": "Blacklisted: Recipient"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_public"
      ]
    },
    {
      "name": "transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11170287298796244984": {
            "error_kind": "string",
            "string": "Something has gone wrong"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "15461801772204881930": {
            "error_kind": "string",
            "string": "Blacklisted: Recipient"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "compute_note_log_unconstrained",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "total_supply",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAAChHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADKHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA3CcCAQACLwwAAQACHAwCAwYcDAMBACYoAIAEBHgADQAAAIAEgAMkAIADAAAAySoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFhTdOygKTe6Q8AQECJg==",
      "debug_symbols": "5VbRioMwEPyXPPuQzW6Szf3KcRTb2iKIFmsPjtJ/v6Rn1FqpRynCcS/qyqwzm1mXPYtttj7tV3m5q47i7f0simqTNnlV+uh8ScS6zosi36+Gr4UMF6uv+OMhLUN4bNK6EW+AinQisnIbnpGl/8YuLzIfSXdJ7vFSqQiXpAZoM4EmJ22LJgemQ1uaADMRt2AmQ0PwRyJYvka+cxEO4BaU/6LT19ydPs+dPmgb5YNBfCzfaaQW7HzeSL7DV8sHdSs/kPACJP62BAvAJIvSYGKa0sgzLBZ1FGXRwoyDSkawU4pHDgKYXyii27pDnoIn857kQ3oyz03lIXTzCoH6ttZyylToewDsgCL8D/fmMMpoDusZc6xRcfBYY/gx2Otw2AnRyoy9JPo/tWq5eK2qr9XMTH0wMJix/dRH4h/1+s+qv/jwM63zdF1k7XaxO5WbwbLRfB2y0d5xqKtNtj3VWdhA+uUDgom+hVBfR1EITILsOTzPNw==",
      "brillig_names": [
        "total_supply"
      ]
    },
    {
      "name": "balance_of_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHxgAAwACgEguCIBIAAElAAAASyUAAABvLgQAAYBJKAIAAgSASScCAwQBOw0AAgADKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAkweAgACAB4CAAMAMzgAAgADAAQkAgAEAAAAkyUAAAJ1HgIAAgknAgMAAQo4AgMEJAIABAAAAK8lAAAChycCAgAALQgBAycCBAQEABABBAEnAwMEAQAoAwIELQwEBS0OAgUAKAUCBS0OAgUAKAUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUAEAEGAScDBQQBACgFAgYtDAYHLQ4CBwAoBwIHLQ4CBwAoBwIHLQ4CBwAoBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgqARQAFLQgBBgAAAQIBLgqARAAGJwIHAAQnAggECS0IAAktDAQKLQwDCy0MBQwtDAYNLQwHDgAQAAgAJQAAApktBAAAJwIHBAgtCAAILQwECS0MAwotDAULLQwGDC0MAQ0AEAAHACUAAAKZLQQAAC0NBgELKAABgEQAByQCAAcAAAHmJwIIBAA8CQEIJwIBBActCAAHLQwECC0MAwktDAUKLQwGCwAQAAEAJQAAA8ItBAAALQ0DAQEoAAGARwAELQ0EAwo4AwIBCygAAYBEAAIkAgACAAACNyUAAATVLwwAAwABHAwBAwYcDAMCAC0MAgEmKACABAR4AA0AAACABIADJACAAwAAAnQqAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiYqAQABBVQ1YMByXTNuPAEBAiYlAAACTC0NAwYtDQQHCygAB4BEAAgkAgAIAAACvycCCQQAPAkBCQsoAAaAQwAHJAIABwAAA04jAAAC1C0NAQYtDQIHLQ0DCC0NBAkNKAAIgEMACiQCAAoAAAL5JQAABOcuBAAGgAMoAIAEBAAEJQAABPkuCIAFAAoAKAoCCwA4CwgMLQ4FDAEoAAiARwAFDjgIBQYkAgAGAAADOSUAAAWHLQ4KAS0OBwItDgUDLQ4JBCMAAAPBJwIGBActCAAHLQwBCC0MAgktDAMKLQwECwAQAAYAJQAAA8ItBAAALQ0BBi0NAgctDQQILgQABoADKACABAQABCUAAAT5LgiABQAJACgJAgoBKAAKgEUACy0OBQstDgkBLQ4HAi4KgEcAAy0OCAQjAAADwSYlAAACTC4IgEUABSMAAAPSDSgABYBDAAYkAgAGAAAEQiMAAAPnLQ0BBS0NAgYtDQMHLQ0ECC0NBgkAKAkCCS0OCQYnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDgUBLQ4KAi0OBwMtDggEJi0NAwYMOAUGBwEoAAWARwAGJAIABwAABGAjAAAEzC0NAQctDQIILQ0DCS0NBAoAKAgCDAA4DAUNLQ0NCwAoBwINADgNBQ4tDQ4MADgLDA0uBAAIgAMoAIAEBAAFJQAABPkuCIAFAAsAKAsCDAA4DAUOLQ4NDi0OBwEtDgsCLQ4JAy0OCgQjAAAEzC0MBgUjAAAD0ioBAAEFAtxuJ4B2Ep08AQECJioBAAEFxWvEWg4QAAI8AQECJi4BgAOABgsAgAYAAoAHJACABwAABRQjAAAFHy4AgAOABSMAAAWGLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABXIuAYAKgAguAoAIgAsBAIAKAAKACgEAgAsAAoALIwAABUEoAYAFBAABAwCABgACgAYjAAAFhiYqAQABBUWnynEZQeQVPAEBAiY=",
      "debug_symbols": "7Z3dTuQ6DMffZa7nInZiO9lXOTpasTCsRkKA+DjSEeLdt8PSdqAuYZwKCdU3K7rkj91fk9hxZ5KnzcXu1+Pvn/vry5v7zY9/njZXN+dnD/ub6+7q6Xm7+XW3v7ra//55/N+bcPgHgF8E97dn14fr+4ezu4fND4iYaLvZXV8cfo45dH/kcn+1665Ced5O2wfEvnlIeNSaldapBHltnQrw0FqS0jinlF8b58TpuPG/2w0gLON/KX1zgPKV/i/En/LAP9f4A0nvP3CMH/tfKKbXxqXTvfc/pqX9B3zr/8FKwi+xIqoVJOBehhRzxYpE6p2SKFChi6FvXBDze7qEn/Aovb3vF53YdGy0J8GoI00XkeOrLGIeRyMF9aEOjbuhO3Zm4Kx2/d4hDGMHiFH7y1KG3iWljK2xRKV1pH4GTEdTAoLWFqFA7waGUmlN2M9NFMObtgeEOTjCVoTJEbYiLI6wEWHxXtiM0HthI0IM3gubEWZH2IgQ0BG2IhRH2IhQry04wlMQsiNsRBh9gfcJhKWvaDHQBCH5QG5G6JWaVoTsA7kZoffCVoTivbAZoffCZoReqWlFmKMjbEXolZpWhMUrNc0IvVLTiDAGX+A1I/RKTStC8NT6PcIXLMmxaFg8BdawoKe1KhZPEjQs0dNPFYsHcw1L8gCtYvF6lobF3xrpWLy3aFj87Y6OZaWRqLur3o145EePRVY6t9SweG/RsKz1M/41LMmxaFhW+lajgmWtbypqWHzKVbCk4FOuimWlyX8Fy1or/zUsHqBVLCut/FewrLXyX8Oy0sp/BUv0FbSKxQO0isWnXA1L8ilXxeIraA0LeW9Rsaw0QMuwuQvKu++tndb6AJFXGs5PggjMob9DljyFuNIotyhE8eHcDjGvtNi6LMSVlmZPgygy3KGUaXQuHlgWgLjSVeWyED06N0OksNI1yLIQPcVphwgeWBaA6ClOO8S17lO0LERPcRaA6CnOJyCWMGw2XnAKMXp0boeYFpgTIQ/bhWOiCkSi0i/mOeO4zzsAahi5/9S0HC38u+H113n+xs5T+sbOM35n56sTRwxQc37cUR8kvDGhuJNj77xkqmx1LzxscyfM+ePGnR9lnMEI3xyycLhXiV9+rzjeK1cOfQCGoxMWxqcaU/7rff7G3vPMbv/HZ4Dw5NvxLMmkUkl1MW2onEKaVE5Zr5zWVPoO3FVVMahEr2MA8EAD8oSGoO5hHLYl6H6c2sJsUUU0qdii0r+YWVWZ7otMHurvJ7uZaXjKlGSqEotqZqTUVMWiymRRlWBS2WzN3BcP+R/lyffOchCLSt93uqbCYFKRSWWiEaNJZWKYZsbXmK9HnIyvTGBSkUlVLCqOJpVYVGKiISby2WQrm8hnE/liIl9myKc0qGgy25SZuFxRQTCpyKKaO/GsomKLau50r4rKEpdLQpPKEs0LmWzpuaikPmWTxBONHr3GIkqhiR0IeiesicQg0l9i1ERkEVlA6PluTZQNCw0IMzGyKhOTbKa3V2U2a2SzRjZrbLPGNmtie25iszYTLasyMsn0PPvDGacT6YNmOLOyoCYyDE/QE9+PLQEmiygbRPoKtiZiA4gEFpHFEunIh7JBEVJEZBCxxRLXJmxVZOl7YghCoH8ssSYyBFYo0SLKp4vQkiygJVlAS7KAlmQBT04WnrvL/87u9me/rnavhx5fPl6fH52B/PD/7e7dcci3dzfnu4vHu93hYOTxTORDv8eUt8jlZWrsLrshtO2gvTykw28lbFGws9pZ/gM=",
      "brillig_names": [
        "balance_of_public"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "burn",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_reduce_total_supply",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4856349594034274052": {
            "error_kind": "string",
            "string": "Function _reduce_total_supply can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQdAIBEgEQGLgiARAABJQAAAEwlAAAATSgCAAEEgEUnAgIEADsNAAEAAiYlAAAAzx4CAAIAHgIAAwAzOAACAAMABCcCAgEBJAIABAAAAHYlAAAA+B4CAAIBHgIAAwAKOAIDBCQCAAQAAACSJQAAAQonAgIAAi8MAAIAAxwMAwUGHAwFBAAcDAQDBgI4AwEEDjgBAwUkAgAFAAAAwyUAAAEcHAwEAQAwDAABAAImKACABAR4AA0AAACABIADJACAAwAAAPcqAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiYqAQABBUNlODnJhn8EPAEBAiYqAQABBSiGkrBH3P1DPAEBAiY=",
      "debug_symbols": "5VfbauMwEP0XP/thLhpp1F9ZSnESpxiME5xkYQn595WzviipW5WS9VL2JVjhjM+Zi8Yz52xTrk6vL1Wz3R2ypx/nrN6ti2O1a8LpfMmzVVvVdfX6Ev+dQfejdMUf9kXTHQ/Hoj1mT8hkJM/KZtM9s0J4x7aqy3ACf8nf4oFogIOhCG1n0MaD69HGox3RzsyA1RjtwWqsicHPeabuMfK9H+CIfjn5/kHRFx2jr6noo7hBPlrmj+V7YdODfbC7k48Aj9aPdKv/yiJLsCAvwqKzLOg9D2YEiAkWAYUeHh41UYKCgwcqDPc5pHm/gwo3KWKXUPTAS4H0mRixv1HU2TF/zc7gF+3sO3Y82qGXKTsCcwWDU32hi8qru21v0E55SLwLef04zM7S0NactYkqCTomd1HI3mdF8L/y1v0Db2ny1iauEFqMuvh0hdjoVb+lb67/m8fffSb+Ueub188yjlUcgflP/3Hu73PoAn54WIBD3uFQmno8pOrJAA5oQy5RT8o4NCRl8ol6krF7oUQTdF9PBLC8fhrfHfqwSXzSQcchI8Q/1X0tjLLRmpsh9PkSTj+LtipWddnvL9tTs47WmeOvfXm32ezb3brcnNqy23Gm9Qa7sLHmhq/DVzgI5EKBI/D8Bg==",
      "brillig_names": [
        "_reduce_total_supply"
      ]
    },
    {
      "name": "_increase_public_balance",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_increase_public_balance"
      ]
    },
    {
      "name": "mint_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "secret_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "mint_private"
      ]
    },
    {
      "name": "balance_of_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "balance_of_private"
      ]
    },
    {
      "name": "burn_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "burn_public"
      ]
    },
    {
      "name": "deliver_transparent_note",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "secret_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "deliver_transparent_note"
      ]
    },
    {
      "name": "redeem_shield",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8539014796744103410": {
            "error_kind": "string",
            "string": "note not popped"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "15461801772204881930": {
            "error_kind": "string",
            "string": "Blacklisted: Recipient"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_notes_internal",
        "get_collapse_hints",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4856349594034274052": {
            "error_kind": "string",
            "string": "Function _reduce_total_supply can only be called internally"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "11205153422240236146": {
            "error_kind": "string",
            "string": "Function get_roles can only be called statically"
          },
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15461801772204881930": {
            "error_kind": "string",
            "string": "Blacklisted: Recipient"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "get_roles",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "user",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::roles::UserFlags",
            "fields": [
              {
                "name": "is_admin",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "is_minter",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "is_blacklisted",
                "type": {
                  "kind": "boolean"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "11205153422240236146": {
            "error_kind": "string",
            "string": "Function get_roles can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_roles"
      ]
    },
    {
      "name": "mint_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15461801772204881930": {
            "error_kind": "string",
            "string": "Blacklisted: Recipient"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "mint_public"
      ]
    },
    {
      "name": "unshield",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "15461801772204881930": {
            "error_kind": "string",
            "string": "Blacklisted: Recipient"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "shield",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "secret_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "861814034187931636": {
            "error_kind": "string",
            "string": "Blacklisted: Sender"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "shield"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "TransparentNote"
            },
            {
              "fields": [
                {
                  "name": "amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "secret_hash",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "TokenNote"
            },
            {
              "fields": [
                {
                  "name": "amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "TokenBlacklist"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "pending_shields",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "roles",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::get_roles_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "is_admin",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_minter",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_blacklisted",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::roles::UserFlags"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::get_roles_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::_increase_public_balance_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::_increase_public_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "secret_hash",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::shield_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::shield_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::redeem_shield_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::redeem_shield_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "roles",
                    "type": {
                      "fields": [
                        {
                          "name": "is_admin",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "is_minter",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "is_blacklisted",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::roles::UserFlags"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::update_roles_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::update_roles_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::transfer_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::transfer_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "secret_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::mint_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::mint_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::burn_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::burn_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::_reduce_total_supply_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::_reduce_total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "TokenBlacklist::total_supply_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::burn_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::burn_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::mint_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::mint_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::unshield_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::unshield_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "TokenBlacklist::balance_of_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "TokenBlacklist::balance_of_public_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "102": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "106": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "109": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "111": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "112": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "114": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "115": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "116": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "118": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "119": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "121": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "125": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/logs/arithmetic_generics_utils.nr",
      "source": "use crate::messages::encryption::log_encryption::HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + ((((((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1))))] = [0; (((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + ((((((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1))))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(\n    _ct: [u8; CT],\n) -> [u8; 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + CT] {\n    [0; 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + CT]\n}\n\n// Recall:\n//   lbwop := 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1) + ((((((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n"
    },
    "128": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "129": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "134": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "136": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "139": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "142": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "145": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "148": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "149": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "150": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "151": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "152": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "153": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "157": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "158": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "159": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "161": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "163": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "164": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "165": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "166": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "168": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "174": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "177": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "179": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr",
      "source": "use dep::protocol_types::{\n    shared_mutable::{\n        ScheduledDelayChange,\n        ScheduledValueChange,\n        shared_mutable_values::{unpack_delay_change, unpack_value_change},\n        SharedMutableValues,\n    },\n    traits::Packable,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let INITIAL_DELAY: u32, Context, let M: u32> Storage<M> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    WithHash<SharedMutableValues<T, INITIAL_DELAY>, _>: Packable<M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: Eq,\n{\n\n    pub fn schedule_value_change<let N: u32>(self, new_value: T)\n    where\n        T: Packable<N>,\n    {\n        let _value_change = self.schedule_and_return_value_change(new_value);\n    }\n\n    pub fn schedule_and_return_value_change<let N: u32>(\n        self,\n        new_value: T,\n    ) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n\n        value_change\n    }\n\n    pub fn schedule_delay_change<let N: u32>(self, new_delay: u32)\n    where\n        T: Packable<N>,\n    {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay<let N: u32>(self) -> u32\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value<let N: u32>(self) -> (T, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay<let N: u32>(self) -> (u32, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change<let N: u32>(self) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        // We don't read ScheduledValueChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.block_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_value_change::<T, N>(packed)\n    }\n\n    fn read_delay_change<let N: u32>(self) -> ScheduledDelayChange<INITIAL_DELAY>\n    where\n        T: Packable<N>,\n    {\n        // Since all ScheduledDelayChange member are packed into a single field, we can read a single storage slot\n        // here and skip the ones that correspond to ScheduledValueChange members. We are abusing the fact that\n        // the field containing the ScheduledDelayChange data is the first one in the storage layout - otherwise we'd\n        // need to offset the storage slot to get the position where it'd land.\n        // We don't read ScheduledDelayChange directly by having it implement Packable because\n        // ScheduledValueChange and ScheduledDelayChange are packed together (sdc and svc.block_of_change are\n        // stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_delay_change::<INITIAL_DELAY>(packed)\n    }\n\n    fn write<let N: u32>(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    )\n    where\n        T: Packable<N>,\n    {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`SharedMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private shared mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(SharedMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: Eq,\n{\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage<let N: u32>(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32)\n    where\n        T: Packable<N>,\n    {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        let values: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_block_number)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UtilityContext>\nwhere\n    T: Eq,\n{\n    pub unconstrained fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let smv: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::utility_public_storage_read(self.context, self.storage_slot);\n\n        let block_number = self.context.block_number() as u32;\n        smv.svc.get_current_at(block_number)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "191": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "192": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "194": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "195": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "196": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "197": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "198": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "200": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "202": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "203": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "206": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "213": {
      "path": "/home/aztec-dev/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "230": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "232": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "244": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr",
      "source": "use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\npub struct MaxBlockNumber {\n    _opt: Option<u32>,\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt.is_some() as Field, self._opt.unwrap_unchecked() as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: if serialized[0] as bool {\n                Option::some(serialized[1] as u32)\n            } else {\n                Option::none()\n            },\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"
    },
    "275": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "290": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "292": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "293": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "294": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "303": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "307": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "309": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "310": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "319": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "323": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_delay_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pub(crate) pre: Option<u32>,\n    pub(crate) post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior constraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Empty for ScheduledDelayChange<INITIAL_DELAY> {\n    fn empty() -> Self {\n        Self { pre: Option::none(), post: Option::none(), block_of_change: 0 }\n    }\n}\n"
    },
    "325": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_value_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub struct ScheduledValueChange<T> {\n    pub(crate) pre: T,\n    pub(crate) post: T,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    // Returns the previous value. This is the value that is current up until the block of change. Note that this value\n    // might not be the current anymore since block of change might have already passed.\n    pub fn get_previous(self) -> (T, u32) {\n        (self.pre, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<T> Empty for ScheduledValueChange<T>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { pre: T::empty(), post: T::empty(), block_of_change: 0 }\n    }\n}\n"
    },
    "327": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/shared_mutable_values.nr",
      "source": "use crate::{\n    hash::poseidon2_hash,\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    traits::{Hash, Packable},\n    utils::arrays,\n};\nuse std::meta::derive;\n\nmod test;\n\n/// SharedMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. Reading\n/// the values separately is tricky because ScheduledValueChange and ScheduledDelayChange are packed together (sdc and\n/// svc.block_of_change are stored in the same slot). For that reason we expose `unpack_value_change` and\n/// `unpack_delay_change` functions that can be used to extract the values from the packed representation. This\n/// is \"hacky\" but there is no way around it.\n#[derive(Eq)]\npub struct SharedMutableValues<T, let INITIAL_DELAY: u32> {\n    pub svc: ScheduledValueChange<T>,\n    pub sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutableValues<T, INITIAL_DELAY> {\n    pub fn new(svc: ScheduledValueChange<T>, sdc: ScheduledDelayChange<INITIAL_DELAY>) -> Self {\n        SharedMutableValues { svc, sdc }\n    }\n}\n\npub fn unpack_value_change<T, let N: u32>(packed: [Field; 2 * N + 1]) -> ScheduledValueChange<T>\nwhere\n    T: Packable<N>,\n{\n    let svc_pre_packed = arrays::subarray(packed, 1);\n    let svc_post_packed = arrays::subarray(packed, N + 1);\n    ScheduledValueChange::new(\n        T::unpack(svc_pre_packed),\n        T::unpack(svc_post_packed),\n        packed[0] as u32,\n    )\n}\n\npub fn unpack_delay_change<let INITIAL_DELAY: u32>(\n    packed: Field,\n) -> ScheduledDelayChange<INITIAL_DELAY> {\n    // This function expects to be called with just the first field of the packed representation, which contains sdc\n    // and svc block_of_change. We'll discard the svc component.\n    let svc_block_of_change = packed as u32;\n\n    let mut tmp = (packed - svc_block_of_change as Field) / TWO_POW_32;\n    let sdc_block_of_change = tmp as u32;\n\n    tmp = (tmp - sdc_block_of_change as Field) / TWO_POW_32;\n    let sdc_post_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_post_is_some as Field) / TWO_POW_8;\n    let sdc_post_inner = tmp as u32;\n\n    tmp = (tmp - sdc_post_inner as Field) / TWO_POW_32;\n    let sdc_pre_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_pre_is_some as Field) / TWO_POW_8;\n    let sdc_pre_inner = tmp as u32;\n\n    ScheduledDelayChange {\n        pre: if sdc_pre_is_some {\n            Option::some(sdc_pre_inner)\n        } else {\n            Option::none()\n        },\n        post: if sdc_post_is_some {\n            Option::some(sdc_post_inner)\n        } else {\n            Option::none()\n        },\n        block_of_change: sdc_block_of_change,\n    }\n}\n\nglobal TWO_POW_32: Field = 2.pow_32(32);\nglobal TWO_POW_8: Field = 2.pow_32(8);\n\n// We pack to `2 * N + 1` fields because ScheduledValueChange contains T twice (hence `2 * N`) and we need one extra\n// field to store ScheduledDelayChange and the block_of_change of ScheduledValueChange.\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Packable<2 * N + 1> for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1] {\n        let mut result = [0; 2 * N + 1];\n\n        // We pack sdc.pre, sdc.post, sdc.block_of_change and svc.block_of_change into a single field as follows:\n        // [ sdc.pre_inner: u32 | sdc.pre_is_some: u8 | sdc.post_inner: u32 | sdc.post_is_some: u8 | sdc.block_of_change: u32 | svc.block_of_change: u32 ]\n        result[0] = self.svc.block_of_change as Field\n            + ((self.sdc.block_of_change as Field) * 2.pow_32(32))\n            + ((self.sdc.post.is_some() as Field) * 2.pow_32(64))\n            + ((self.sdc.post.unwrap_unchecked() as Field) * 2.pow_32(72))\n            + ((self.sdc.pre.is_some() as Field) * 2.pow_32(104))\n            + ((self.sdc.pre.unwrap_unchecked() as Field) * 2.pow_32(112));\n\n        // Pack the pre and post values from ScheduledValueChange\n        let svc_pre_packed = self.svc.pre.pack();\n        let svc_post_packed = self.svc.post.pack();\n        for i in 0..N {\n            result[i + 1] = svc_pre_packed[i];\n            result[i + 1 + N] = svc_post_packed[i];\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; 2 * N + 1]) -> Self {\n        let svc = unpack_value_change::<T, N>(fields);\n        let sdc = unpack_delay_change::<INITIAL_DELAY>(fields[0]);\n        Self::new(svc, sdc)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Hash for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn hash(self) -> Field {\n        poseidon2_hash(self.pack())\n    }\n}\n"
    },
    "330": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "344": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "348": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "349": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "365": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "366": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "368": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "378": {
      "path": "/home/aztec-dev/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "39": {
      "path": "std/ops/arith.nr",
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/app/token_blacklist_contract/src/main.nr",
      "source": "mod types;\n\nuse dep::aztec::macros::aztec;\n\n// NOTE: This contract is stale and is kept around only as a reference of how to implement a blacklist.\n// Don't take into consideration the interface of this contract. The TransparentNote \"shield\" flow is\n// deprecated and has been replaced with partial notes in the standard token contract.\n// TODO(#11970): https://github.com/AztecProtocol/aztec-packages/issues/11970\n//\n// Minimal token implementation that supports `AuthWit` accounts and SharedMutable variables.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n// The SharedMutables are used for access control related to minters and blacklist.\n#[aztec]\npub contract TokenBlacklist {\n    // Libs\n    use dep::aztec::{\n        hash::compute_secret_hash,\n        macros::{\n            functions::{initializer, internal, private, public, utility, view},\n            storage::storage,\n        },\n        messages::{\n            discovery::private_notes::attempt_note_discovery,\n            logs::note::{encode_and_encrypt_note, encode_and_encrypt_note_unconstrained},\n        },\n        prelude::{AztecAddress, Map, NoteGetterOptions, PrivateSet, PublicMutable, SharedMutable},\n        utils::comparison::Comparator,\n    };\n\n    use aztec::note::note_interface::NoteHash;\n    use aztec::note::note_interface::NoteProperties;\n    use aztec::note::note_interface::NoteType;\n    use aztec::protocol_types::traits::ToField;\n    use std::ops::{Add, Sub};\n\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n    };\n\n    use crate::types::{\n        balances_map::BalancesMap, roles::UserFlags, token_note::TokenNote,\n        transparent_note::TransparentNote,\n    };\n    use aztec::protocol_types::{\n        constants::MAX_NOTE_HASHES_PER_TX, traits::Packable, utils::arrays::array_concat,\n    };\n\n    // Changing an address' roles has a certain block delay before it goes into effect.\n    global CHANGE_ROLES_DELAY_BLOCKS: u32 = 2;\n\n    #[storage]\n    struct Storage<Context> {\n        balances: BalancesMap<TokenNote, Context>,\n        total_supply: PublicMutable<u128, Context>,\n        pending_shields: PrivateSet<TransparentNote, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<u128, Context>, Context>,\n        roles: Map<AztecAddress, SharedMutable<UserFlags, CHANGE_ROLES_DELAY_BLOCKS, Context>, Context>,\n    }\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress) {\n        let admin_roles = UserFlags { is_admin: true, is_minter: false, is_blacklisted: false };\n        storage.roles.at(admin).schedule_value_change(admin_roles);\n    }\n\n    #[public]\n    #[view]\n    fn total_supply() -> pub Field {\n        storage.total_supply.read().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> pub Field {\n        storage.public_balances.at(owner).read().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn get_roles(user: AztecAddress) -> UserFlags {\n        storage.roles.at(user).get_current_value()\n    }\n\n    #[public]\n    fn update_roles(user: AztecAddress, roles: UserFlags) {\n        let caller_roles = storage.roles.at(context.msg_sender()).get_current_value();\n        assert(caller_roles.is_admin, \"caller is not admin\");\n\n        storage.roles.at(user).schedule_value_change(roles);\n    }\n\n    #[public]\n    fn mint_public(to: AztecAddress, amount: u128) {\n        let to_roles = storage.roles.at(to).get_current_value();\n        assert(!to_roles.is_blacklisted, \"Blacklisted: Recipient\");\n\n        let caller_roles = storage.roles.at(context.msg_sender()).get_current_value();\n        assert(caller_roles.is_minter, \"caller is not minter\");\n\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n\n    #[public]\n    fn mint_private(amount: u128, secret_hash: Field) {\n        let caller_roles = storage.roles.at(context.msg_sender()).get_current_value();\n        assert(caller_roles.is_minter, \"caller is not minter\");\n\n        let pending_shields = storage.pending_shields;\n        let note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.total_supply.write(supply);\n\n        // We insert the note hash into the pending_shields. Since the TransparentNote flow is deprecated (use partial\n        // notes instead), we no longer have utility a function exposed on the PrivateSet to insert the note hash from\n        // public context. Hence we need to manually get the slot and insert the note hash into the context.\n        let note_hash = note.compute_note_hash(pending_shields.storage_slot);\n        context.push_note_hash(note_hash);\n    }\n\n    #[public]\n    fn shield(from: AztecAddress, amount: u128, secret_hash: Field, nonce: Field) {\n        let from_roles = storage.roles.at(from).get_current_value();\n        assert(!from_roles.is_blacklisted, \"Blacklisted: Sender\");\n\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let note = TransparentNote::new(amount, secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n\n        // We insert the note hash into the pending_shields. Since the TransparentNote flow is deprecated (use partial\n        // notes instead), we no longer have utility a function exposed on the PrivateSet to insert the note hash from\n        // public context. Hence we need to manually get the slot and insert the note hash into the context.\n        let note_hash = note.compute_note_hash(pending_shields.storage_slot);\n        context.push_note_hash(note_hash);\n    }\n\n    #[public]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: u128, nonce: Field) {\n        let from_roles = storage.roles.at(from).get_current_value();\n        assert(!from_roles.is_blacklisted, \"Blacklisted: Sender\");\n        let to_roles = storage.roles.at(to).get_current_value();\n        assert(!to_roles.is_blacklisted, \"Blacklisted: Recipient\");\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n\n    #[public]\n    fn burn_public(from: AztecAddress, amount: u128, nonce: Field) {\n        let from_roles = storage.roles.at(from).get_current_value();\n        assert(!from_roles.is_blacklisted, \"Blacklisted: Sender\");\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n\n    #[private]\n    fn redeem_shield(to: AztecAddress, amount: u128, secret: Field) {\n        let to_roles = storage.roles.at(to).get_current_value();\n        assert(!to_roles.is_blacklisted, \"Blacklisted: Recipient\");\n\n        let secret_hash = compute_secret_hash(secret);\n\n        // Pop 1 note (set_limit(1)) which has an amount stored in a field with index 0 (select(0, amount)) and\n        // a secret_hash stored in a field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options\n            .select(TransparentNote::properties().amount, Comparator.EQ, amount)\n            .select(TransparentNote::properties().secret_hash, Comparator.EQ, secret_hash)\n            .set_limit(1);\n\n        let notes = storage.pending_shields.pop_notes(options);\n        assert(notes.len() == 1, \"note not popped\");\n\n        // Add the token note to user's balances set\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            to,\n            context.msg_sender(),\n        ));\n    }\n\n    #[private]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: u128, nonce: Field) {\n        let from_roles = storage.roles.at(from).get_current_value();\n        assert(!from_roles.is_blacklisted, \"Blacklisted: Sender\");\n        let to_roles = storage.roles.at(to).get_current_value();\n        assert(!to_roles.is_blacklisted, \"Blacklisted: Recipient\");\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        TokenBlacklist::at(context.this_address())._increase_public_balance(to, amount).enqueue(\n            &mut context,\n        );\n    }\n\n    // docs:start:transfer_private\n    #[private]\n    fn transfer(from: AztecAddress, to: AztecAddress, amount: u128, nonce: Field) {\n        let from_roles = storage.roles.at(from).get_current_value();\n        assert(!from_roles.is_blacklisted, \"Blacklisted: Sender\");\n        let to_roles = storage.roles.at(to).get_current_value();\n        assert(!to_roles.is_blacklisted, \"Blacklisted: Recipient\");\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n\n    #[private]\n    fn burn(from: AztecAddress, amount: u128, nonce: Field) {\n        let from_roles = storage.roles.at(from).get_current_value();\n        assert(!from_roles.is_blacklisted, \"Blacklisted: Sender\");\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        TokenBlacklist::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n\n    /// Internal ///\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: u128) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: u128) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n\n    #[utility]\n    unconstrained fn balance_of_private(owner: AztecAddress) -> Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n\n    // docs:start:deliver_note_contract_method\n    #[utility]\n    unconstrained fn deliver_transparent_note(\n        contract_address: AztecAddress,\n        amount: u128,\n        secret_hash: Field,\n        tx_hash: Field,\n        unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n        first_nullifier_in_tx: Field,\n        recipient: AztecAddress,\n    ) {\n        // docs:end:deliver_note_contract_method\n\n        let note = TransparentNote::new(amount, secret_hash);\n        let storage_slot = TokenBlacklist::storage_layout().pending_shields.slot;\n        let note_type_id = TransparentNote::get_id();\n        let packed_note = BoundedVec::from_array(note.pack());\n\n        attempt_note_discovery(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            _compute_note_hash_and_nullifier,\n            storage_slot,\n            note_type_id,\n            packed_note,\n        );\n    }\n}\n"
    },
    "51": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/app/token_blacklist_contract/src/types/balances_map.nr",
      "source": "use crate::types::token_note::OwnedNote;\nuse dep::aztec::{\n    context::{PrivateContext, UtilityContext},\n    note::note_emission::OuterNoteEmission,\n    protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::Packable},\n};\nuse dep::aztec::prelude::{\n    AztecAddress, Map, NoteGetterOptions, NoteHash, NoteType, NoteViewerOptions, PrivateSet,\n    RetrievedNote,\n};\n\nuse std::ops::Add;\n\npub struct BalancesMap<Note, Context> {\n    map: Map<AztecAddress, PrivateSet<Note, Context>, Context>,\n}\n\nimpl<Note, Context> BalancesMap<Note, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            map: Map::new(\n                context,\n                storage_slot,\n                |context, slot| PrivateSet::new(context, slot),\n            ),\n        }\n    }\n}\n\nimpl<Note> BalancesMap<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + OwnedNote + Packable<N> + Eq,\n{\n    pub unconstrained fn balance_of<let N: u32>(self: Self, owner: AztecAddress) -> u128 {\n        self.balance_of_with_offset(owner, 0)\n    }\n\n    pub unconstrained fn balance_of_with_offset<let N: u32>(\n        self: Self,\n        owner: AztecAddress,\n        offset: u32,\n    ) -> u128 {\n        let mut balance = 0 as u128;\n        // docs:start:view_notes\n        let mut options = NoteViewerOptions::new();\n        let notes = self.map.at(owner).view_notes(options.set_offset(offset));\n        // docs:end:view_notes\n        for i in 0..options.limit {\n            if i < notes.len() {\n                balance = balance + notes.get_unchecked(i).get_amount();\n            }\n        }\n        if (notes.len() == options.limit) {\n            balance = balance + self.balance_of_with_offset(owner, offset + options.limit);\n        }\n\n        balance\n    }\n}\n\nimpl<Note> BalancesMap<Note, &mut PrivateContext> {\n\n    pub fn add<let N: u32>(self: Self, owner: AztecAddress, addend: u128) -> OuterNoteEmission<Note>\n    where\n        Note: NoteType + NoteHash + OwnedNote + Eq + Packable<N>,\n    {\n        if addend == 0 as u128 {\n            OuterNoteEmission::new(Option::none())\n        } else {\n            let addend_note = Note::new(addend, owner);\n\n            // docs:start:insert\n            OuterNoteEmission::new(Option::some(self.map.at(owner).insert(addend_note)))\n            // docs:end:insert\n        }\n    }\n\n    pub fn sub<let N: u32>(\n        self: Self,\n        owner: AztecAddress,\n        subtrahend: u128,\n    ) -> OuterNoteEmission<Note>\n    where\n        Note: NoteType + NoteHash + OwnedNote + Eq + Packable<N>,\n    {\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend);\n        let notes = self.map.at(owner).pop_notes(options);\n\n        let mut minuend: u128 = 0 as u128;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note: Note = notes.get_unchecked(i);\n                minuend = minuend + note.get_amount();\n            }\n        }\n\n        // This is to provide a nicer error msg,\n        // without it minuend-subtrahend would still catch it, but more generic error then.\n        // without the == true, it includes 'minuend.ge(subtrahend)' as part of the error.\n        assert(minuend >= subtrahend, \"Balance too low\");\n\n        self.add(owner, minuend - subtrahend)\n    }\n}\n\npub fn filter_notes_min_sum<Note>(\n    retrieved_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: u128,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + OwnedNote,\n{\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let mut sum = 0 as u128;\n    for i in 0..retrieved_notes.len() {\n        if retrieved_notes[i].is_some() & sum < min_sum {\n            let retrieved_note = retrieved_notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum = sum.add(retrieved_note.note.get_amount());\n        }\n    }\n    selected\n}\n"
    },
    "53": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/app/token_blacklist_contract/src/types/roles.nr",
      "source": "use dep::aztec::protocol_types::traits::{Deserialize, Packable, Serialize};\nuse aztec::protocol_types::traits::ToField;\n\nglobal ADMIN_FLAG: u64 = 1;\nglobal MINTER_FLAG: u64 = 2;\nglobal BLACKLIST_FLAG: u64 = 4;\n\npub struct UserFlags {\n    is_admin: bool,\n    is_minter: bool,\n    is_blacklisted: bool,\n}\n\nimpl Packable<1> for UserFlags {\n    fn pack(self) -> [Field; 1] {\n        let mut value: u64 = 0;\n\n        if self.is_admin {\n            value = value | ADMIN_FLAG;\n        }\n\n        if self.is_minter {\n            value = value | MINTER_FLAG;\n        }\n\n        if self.is_blacklisted {\n            value = value | BLACKLIST_FLAG;\n        }\n\n        [value.to_field()]\n    }\n\n    fn unpack(fields: [Field; 1]) -> Self {\n        let value: u64 = fields[0] as u64;\n        let is_admin = value & ADMIN_FLAG == ADMIN_FLAG;\n        let is_minter = value & MINTER_FLAG == MINTER_FLAG;\n        let is_blacklisted = value & BLACKLIST_FLAG == BLACKLIST_FLAG;\n\n        Self { is_admin, is_minter, is_blacklisted }\n    }\n}\n\nimpl Eq for UserFlags {\n    fn eq(self, other: Self) -> bool {\n        (self.is_admin == other.is_admin)\n            & (self.is_minter == other.is_minter)\n            & (self.is_blacklisted == other.is_blacklisted)\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<3> for UserFlags {\n    fn serialize(self) -> [Field; 3] {\n        [self.is_admin.to_field(), self.is_minter.to_field(), self.is_blacklisted.to_field()]\n        // [self.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<3> for UserFlags {\n    fn deserialize(fields: [Field; 3]) -> Self {\n        Self {\n            is_admin: fields[0] as bool,\n            is_minter: fields[1] as bool,\n            is_blacklisted: fields[2] as bool,\n        }\n    }\n}\n\nmod test {\n    use crate::types::roles::UserFlags;\n    use aztec::protocol_types::traits::Packable;\n\n    fn assert_packable(is_minter: bool, is_admin: bool, is_blacklisted: bool) {\n        let flags = UserFlags { is_minter, is_admin, is_blacklisted };\n        let converted = UserFlags::unpack(flags.pack());\n\n        assert_eq(converted.is_minter, is_minter);\n        assert_eq(converted.is_admin, is_admin);\n        assert_eq(converted.is_blacklisted, is_blacklisted);\n    }\n\n    #[test]\n    fn test_to_from_field() {\n        assert_packable(false, false, false);\n        assert_packable(false, false, true);\n\n        assert_packable(false, true, false);\n        assert_packable(false, true, true);\n\n        assert_packable(true, false, false);\n        assert_packable(true, false, true);\n\n        assert_packable(true, true, false);\n        assert_packable(true, true, true);\n    }\n}\n"
    },
    "54": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/app/token_blacklist_contract/src/types/token_note.nr",
      "source": "use dep::aztec::{\n    macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress,\n};\n\ntrait OwnedNote {\n    fn new(amount: u128, owner: AztecAddress) -> Self;\n    fn get_amount(self) -> u128;\n}\n\n#[note]\n#[derive(Eq)]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: u128,\n    owner: AztecAddress,\n    // Randomness of the note to protect against note hash preimage attacks\n    randomness: Field,\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { amount, owner, randomness }\n    }\n\n    fn get_amount(self) -> u128 {\n        self.amount\n    }\n}\n"
    },
    "55": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-contracts/contracts/app/token_blacklist_contract/src/types/transparent_note.nr",
      "source": "use dep::aztec::{\n    macros::notes::custom_note,\n    prelude::{NoteHash, PrivateContext},\n    protocol_types::{\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::Packable,\n        utils::arrays::array_concat,\n    },\n};\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[custom_note]\n#[derive(Eq)]\npub struct TransparentNote {\n    amount: u128,\n    secret_hash: Field,\n}\n\nimpl NoteHash for TransparentNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        let inputs = array_concat(self.pack(), [storage_slot]);\n        poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__NOTE_HASH)\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(\n        self,\n        _context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        // compute_nullifier ignores context so we can reuse it here\n        self.compute_nullifier(zeroed(), note_hash_for_nullify)\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: u128, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash }\n    }\n}\n"
    },
    "57": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "65": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "66": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "73": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "74": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "75": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "76": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "80": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "92": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "95": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "96": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "97": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    }
  }
}

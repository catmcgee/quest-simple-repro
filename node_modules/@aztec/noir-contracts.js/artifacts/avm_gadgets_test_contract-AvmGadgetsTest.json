{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "AvmGadgetsTest",
  "functions": [
    {
      "name": "sha256_hash_30",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 30,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_30"
      ]
    },
    {
      "name": "sha256_hash_255",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 255,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIF4JwAABAMnAgIE/ycCAwQAHxgAAwACgFkdAIBZgFkCHQCAWoBaAh0AgFuAWwIdAIBcgFwCHQCAXYBdAh0AgF6AXgIdAIBfgF8CHQCAYIBgAh0AgGGAYQIdAIBigGICHQCAY4BjAh0AgGSAZAIdAIBlgGUCHQCAZoBmAh0AgGeAZwIdAIBogGgCHQCAaYBpAh0AgGqAagIdAIBrgGsCHQCAbIBsAh0AgG2AbQIdAIBugG4CHQCAb4BvAh0AgHCAcAIdAIBxgHECHQCAcoByAh0AgHOAcwIdAIB0gHQCHQCAdYB1Ah0AgHaAdgIdAIB3gHcCHQCAeIB4Ah0AgHmAeQIdAIB6gHoCHQCAe4B7Ah0AgHyAfAIdAIB9gH0CHQCAfoB+Ah0AgH+AfwIdAICAgIACHQCAgYCBAh0AgIKAggIdAICDgIMCHQCAhICEAh0AgIWAhQIdAICGgIYCHQCAh4CHAh0AgIiAiAIdAICJgIkCHQCAioCKAh0AgIuAiwIdAICMgIwCHQCAjYCNAh0AgI6AjgIdAICPgI8CHQCAkICQAh0AgJGAkQIdAICSgJICHQCAk4CTAh0AgJSAlAIdAICVgJUCHQCAloCWAh0AgJeAlwIdAICYgJgCHQCAmYCZAh0AgJqAmgIdAICbgJsCHQCAnICcAh0AgJ2AnQIdAICegJ4CHQCAn4CfAh0AgKCAoAIdAIChgKECHQCAooCiAh0AgKOAowIdAICkgKQCHQCApYClAh0AgKaApgIdAICngKcCHQCAqICoAh0AgKmAqQIdAICqgKoCHQCAq4CrAh0AgKyArAIdAICtgK0CHQCAroCuAh0AgK+ArwIdAICwgLACHQCAsYCxAh0AgLKAsgIdAICzgLMCHQCAtIC0Ah0AgLWAtQIdAIC2gLYCHQCAt4C3Ah0AgLiAuAIdAIC5gLkCHQCAuoC6Ah0AgLuAuwIdAIC8gLwCHQCAvYC9Ah0AgL6AvgIdAIC/gL8CHQCAwIDAAh0AgMGAwQIdAIDCgMICHQCAw4DDAh0AgMSAxAIdAIDFgMUCHQCAxoDGAh0AgMeAxwIdAIDIgMgCHQCAyYDJAh0AgMqAygIdAIDLgMsCHQCAzIDMAh0AgM2AzQIdAIDOgM4CHQCAz4DPAh0AgNCA0AIdAIDRgNECHQCA0oDSAh0AgNOA0wIdAIDUgNQCHQCA1YDVAh0AgNaA1gIdAIDXgNcCHQCA2IDYAh0AgNmA2QIdAIDagNoCHQCA24DbAh0AgNyA3AIdAIDdgN0CHQCA3oDeAh0AgN+A3wIdAIDggOACHQCA4YDhAh0AgOKA4gIdAIDjgOMCHQCA5IDkAh0AgOWA5QIdAIDmgOYCHQCA54DnAh0AgOiA6AIdAIDpgOkCHQCA6oDqAh0AgOuA6wIdAIDsgOwCHQCA7YDtAh0AgO6A7gIdAIDvgO8CHQCA8IDwAh0AgPGA8QIdAIDygPICHQCA84DzAh0AgPSA9AIdAID1gPUCHQCA9oD2Ah0AgPeA9wIdAID4gPgCHQCA+YD5Ah0AgPqA+gIdAID7gPsCHQCA/ID8Ah0AgP2A/QIdAID+gP4CHQCA/4D/Ah0AgQCBAAIdAIEBgQECHQCBAoECAh0AgQOBAwIdAIEEgQQCHQCBBYEFAh0AgQaBBgIdAIEHgQcCHQCBCIEIAh0AgQmBCQIdAIEKgQoCHQCBC4ELAh0AgQyBDAIdAIENgQ0CHQCBDoEOAh0AgQ+BDwIdAIEQgRACHQCBEYERAh0AgRKBEgIdAIETgRMCHQCBFIEUAh0AgRWBFQIdAIEWgRYCHQCBF4EXAh0AgRiBGAIdAIEZgRkCHQCBGoEaAh0AgRuBGwIdAIEcgRwCHQCBHYEdAh0AgR6BHgIdAIEfgR8CHQCBIIEgAh0AgSGBIQIdAIEigSICHQCBI4EjAh0AgSSBJAIdAIElgSUCHQCBJoEmAh0AgSeBJwIdAIEogSgCHQCBKYEpAh0AgSqBKgIdAIErgSsCHQCBLIEsAh0AgS2BLQIdAIEugS4CHQCBL4EvAh0AgTCBMAIdAIExgTECHQCBMoEyAh0AgTOBMwIdAIE0gTQCHQCBNYE1Ah0AgTaBNgIdAIE3gTcCHQCBOIE4Ah0AgTmBOQIdAIE6gToCHQCBO4E7Ah0AgTyBPAIdAIE9gT0CHQCBPoE+Ah0AgT+BPwIdAIFAgUACHQCBQYFBAh0AgUKBQgIdAIFDgUMCHQCBRIFEAh0AgUWBRQIdAIFGgUYCHQCBR4FHAh0AgUiBSAIdAIFJgUkCHQCBSoFKAh0AgUuBSwIdAIFMgUwCHQCBTYFNAh0AgU6BTgIdAIFPgU8CHQCBUIFQAh0AgVGBUQIdAIFSgVICHQCBU4FTAh0AgVSBVAIdAIFVgVUCHQCBVoFWAh0AgVeBVwIoAgABBIBZJwIDBP8tCAECKAIABAQBAAAQAQQBJwMCBAEAKAICBC4EAAGAAy4EAASABC4EAAOABSUAAAehLQwCASUAAAfnJQAACR0AKAECAigCAAMEgVgnAgQEIC4EAAKAAy4EAAOABC4EAASABSUAAAehKAIAAgSBWCcCAwQgOw0AAgADAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAAfmLgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAAAe1JikAgEMEagnmZykAgEQEu2euhSkAgEUEPG7zcikAgEYEpU/1OikAgEcEUQ5SfykAgEgEmwVojCkAgEkEH4PZqykAgEoEW+DNGS4AAAGASygAgEwEAAkBAAABgEwAASgBgEsEAAEBAIBLAAKATC4AgEyATS4CgEOATQEAgE0AAoBNLgKARIBNAQCATQACgE0uAoBFgE0BAIBNAAKATS4CgEaATQEAgE0AAoBNLgKAR4BNAQCATQACgE0uAoBIgE0BAIBNAAKATS4CgEmATQEAgE0AAoBNLgKASoBNKACATAQAQCgAgE0EAAQoAIBOBAA4KACATwQAECgAgFAEAA4oAIBRBAEAKACAUgQAAygAgFMCAAAoAIBUBAAAKACAVQEAASgAgFYEAAEoAIBXAgAIKACAWAQA/yYlAAASeC0NAQMAKAMCAy0OAwEtCAEDAAABAgEuCoBLAAMuCIBUAAIjAAAJSQ0oAAKAUgAEJAIABAAAEdkjAAAJXicCBATAJwIHBAgtCAAILQwBCS4IgFgACi0MBAsAEAAHACUAABKhLQQAAC0MCQUtDAoGLQ0FAQAoAQIBLQ4BBQcoAAaATQABDSgAAYBPAAQkAgAEAAAJuiUAABVfACgFAgcAOAcBCC0NCAQnAggEBAY4BggJBDgJCAoCOAYKBwMwgE0ABwAIDygAB4BNAAkkAgAJAAAJ+SUAABVxHAwICgIcDAoJBBwMCQgCBTCAVwAIAAknAgsCAAo4CwgKJAIACgAACjwGOAkIDQsoAA2AVwAMJAIADAAACjwlAAAVgxo4BAkKJwIEAgQMOAgECycCCAIgJAIACwAACmgjAAAKXS4IgFQAAiMAAAqIGDgKCQsMOAkICiQCAAoAAAp/JQAAFZUtDAsCIwAACogDMIBSAAcACg8oAAeAUgALJAIACwAACqUlAAAVcRwMCgsCHAwLBwQcDAcKAgw4CgQHJAIABwAACtEjAAAKxi4IgFQACSMAAAsqBTCAVwAKAAcnAgwCAAo4DAoLJAIACwAACwUGOAcKDgsoAA6AVwANJAIADQAACwUlAAAVgycCCgSAGDgKBwsMOAcICiQCAAoAAAshJQAAFZUtDAsJIwAACyoAOAIJCw44AgsMJAIADAAAC0ElAAAVpy4EAAWAAygAgAQEABElAAAVuS4IgAUAAgAoAgIJADgJAQwtDgsMDSgABoBOAAEkAgABAAALxiMAAAt8LQ0CAQAoAQIBLQ4BAi0NAwEtCAEDJwIFBAkAEAEFAScDAwQBACgCAgUAKAECBgAoAwIJQD8ACQAGAAUtDAMHLgiAVAAKIwAAC/EtDQMBASgABoBWAAMOOAYDBSQCAAUAAAvkJQAAFactDAEHLQwDCiMAAAvxLQ0HAQAoAQIBLQ4BBy0NAgEAKAECAS0OAQItCAEBAAABAgEtDgIBLQgBAwAAAQIBLQ4KAycCBgQEBjgKBgkEOAkGCwI4CgsFCygABYBUAAYkAgAGAAANZSMAAAxOBygACoBNAAkDMIBNAAUACw8oAAWATQAMJAIADAAADHMlAAAVcQ0oAAmATwAFJAIABQAADIglAAAVXwAoAgIMADgMCQ0tDQ0FHAwLDQIcDA0MBBwMDA0CBTCAVwANAAwnAg8CAAo4Dw0OJAIADgAADNkGOAwNEQsoABGAVwAQJAIAEAAADNklAAAVgxo4BQwODDgNBAUkAgAFAAAM+yMAAAzwLgiAVAAGIwAADRsYOA4MBAw4DAgFJAIABQAADRIlAAAVlS0MBAYjAAANGy4EAAKAAygAgAQEABElAAAVuS4IgAUABAAoBAIFADgFCQgtDgYILQ4EAQA4CgsCDjgKAgQkAgAEAAANXCUAABWnLQ4CAyMAAA1lLQ0DBAcoAASATQADLQwDAiMAAA16DSgAAoBQAAMkAgADAAARgyMAAA2PJwIDAgcnAgQC+C0IAQUnAgYECQAQAQYBJwMFBAEAKAUCBi0MBgguCoBTAAgAKAgCCC4KgFMACAAoCAIILgqAUwAIACgIAgguCoBTAAgAKAgCCC4KgFMACAAoCAIILgqAUwAIACgIAggtDgMIACgIAggtDgQIJwIDBAInAgQECC4IgFQAAiMAAA4ZDDgCAwYkAgAGAAAP4yMAAA4rLQ0BAy0IAQEAAAECAS0IAQUnAgYEIQAQAQYBJwMFBAEAKAUCBicCCAQgADgIBggtDAYJDDgJCAoWDAoKJAIACgAADn8uCoBTAAkAKAkCCSMAAA5eLQgBBgAAAQIBLQ4FBi0NBwUAKAUCBS0OBQctCAEFJwIIBAkAEAEIAScDBQQBACgDAggAKAcCCQAoBQIKQD8ACgAJAAgtDgUBJwIDBCAuCIBUAAIjAAAO1ww4AgQFJAIABQAADu4jAAAO6S0NBgEmLQ0BBwAoBwIJADgJAgotDQoIHAwIBwAnAgkBAC0IAQgnAgoEBQAQAQoBJwMIBAEAKAgCCicCCwQEQwOwAAeAUQALAAkACgUwgE0AAgAHLgiAVAAFIwAAD0cNKAAFgE0ACSQCAAkAAA9tIwAAD1wBKAACgFYABS0MBQIjAAAO1y0NBgkAOAcFCg44BwoLJAIACwAAD4glAAAVpwAoCAIMADgMBQ0tDQ0LDDgKAwwkAgAMAAAPqCUAABVfLgQACYADKACABAQAISUAABW5LgiABQAMACgMAg0AOA0KDi0OCw4tDgwGASgABYBWAAktDAkFIwAAD0cFKAACgE0ABi0NAQgBMIBQAAIACQw4BgQKJAIACgAAEAklAAAVXwAoBQILADgLBgwtDQwKASgABoBWAAsOOAYLDCQCAAwAABAxJQAAFacMOAsEDCQCAAwAABBDJQAAFV8AKAUCDQA4DQsOLQ0ODAA4BgMLDjgGCw0kAgANAAAQaCUAABWnDDgLBA0kAgANAAAQeiUAABVfACgFAg4AOA4LDy0NDw0BKAAGgFIACw44BgsOJAIADgAAEKIlAAAVpww4CwQGJAIABgAAELQlAAAVXwAoBQIOADgOCw8tDQ8GHAwKCwQZKAALgFcAChwMDAsEADgKCwwOOAoMDiQCAA4AABDrJQAAFacZKAAMgFcAChwMDQsEADgKCwwOOAoMDSQCAA0AABEPJQAAFacZKAAMgFcAChwMBgsEADgKCwYOOAoGDCQCAAwAABEzJQAAFacNKAAJgE8ACiQCAAoAABFIJQAAFV8uBAAIgAMoAIAEBAARJQAAFbkuCIAFAAoAKAoCCwA4CwkMLQ4GDC0OCgEBKAACgFYABi0MBgIjAAAOGS0NAQMNKAACgE8ABCQCAAQAABGcJQAAFV8uBAADgAMoAIAEBAARJQAAFbkuCIAFAAQAKAQCBQA4BQIGLgqAVAAGLQ4EAQEoAAKAVgADLQwDAiMAAA16LQ0BBAAoBAIELQ4EAQUwgEwAAgAEJwIHBAgtCAAILQwBCS4IgFgACi0MBAsAEAAHACUAABKhLQQAAC0MCQUtDAoGLQ0FBAAoBAIELQ4EBS0NAwQtDQQHACgHAgctDgcELQgBBycCCAQJABABCAEnAwcEAQAoBQIIACgEAgkAKAcCCkA/AAoACQAILQ4HAwEoAAKAVgAELQwEAiMAAAlJKACABAR4AA0AAACABIADJACAAwAAEqAqAQABBfeh86+lrdTKPAEBAiYlAAASeC0IAQUnAgYEEQAQAQYBJwMFBAEAKAUCBicCBwQQADgHBgctDAYIDDgIBwkWDAkJJAIACQAAEu0uCoBUAAgAKAgCCCMAABLMLQgBBgAAAQIBLQ4FBgw4AgMFJAIABQAAE2wjAAATDAEoAAOATAAHDjgDBwgkAgAIAAATJiUAABWnDDgCBwgkAgAIAAATQyMAABM4LgiATAAFIwAAE2MCOAIDBw44AwIIJAIACAAAE1olAAAVcS0MBwUjAAATYy0MBQQjAAATdy4IgFQABCMAABN3BygABIBNAAItCAEFAAABAgEtDgIFJwIIBAQGOAQICQQ4CQgKAjgECgcLKAAHgFQACCQCAAgAABPYIwAAE7UBKAACgFYABw44AgcIJAIACAAAE88lAAAVpy0OBwUjAAAT2C0NBQcuCIBUAAIjAAAT5ww4AgcFJAIABQAAFAIjAAAT+S0NBgEtDAQCJi0IAQgAAAECAS4KgFQACAUoAAKATQAJBygACYBNAAsKOAsCCiQCAAoAABQzJQAAFYMuCIBUAAUjAAAUPg0oAAWATQAKJAIACgAAFKsjAAAUUy0NBgUtDQgJDSgAAoBPAAgkAgAIAAAUcCUAABVfLgQABYADKACABAQAESUAABW5LgiABQAIACgIAgoAOAoCCy0OCQsBKAACgFYABS0OCAYtDAUCIwAAE+cAOAkFCw44CQsMJAIADAAAFMIlAAAVpww4CwQMJAIADAAAFN8jAAAU1C4IgFMACiMAABUiADgDCwwOOAMMDSQCAA0AABT2JQAAFacNKAAMgFgACyQCAAsAABULJQAAFV8AKAECDQA4DQwOLQ0OCy0MCwojAAAVIi0NCAsZKAALgFcADBwMCgsEADgMCwoOOAwKDSQCAA0AABVKJQAAFactDgoIASgABYBWAAotDAoFIwAAFD4qAQABBcVrxFoOEAACPAEBAiYqAQABBSiGkrBH3P1DPAEBAiYqAQABBWRhiKjGz5TLPAEBAiYqAQABBclvkzsTnekWPAEBAiYqAQABBUWnynEZQeQVPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAABXUIwAAFd8uAIADgAUjAAAWRi4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAABYyLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAABYBKAGABQQAAQMAgAYAAoAGIwAAFkYm",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_255"
      ]
    },
    {
      "name": "poseidon2_hash",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 10,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBRJwAABAMnAgIECicCAwQAHxgAAwACgEYoAgABBIBGJwIDBAotCAECJwIEBAsAEAEEAScDAgQBACgCAgQuBAABgAMuBAAEgAQuBAADgAUlAAAAhC0MAgElAAAAyiUAAADgLgQAAYBQKAIAAgSAUCcCAwQBOw0AAgADAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAADJLgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAAACYJigAgEMEAAMoAIBEBAAAKACARQQAASYlAAADkS0NAQMAKAMCAy0OAwEnAgMAAC0IAQQnAgUEBAAQAQUBJwMEBAEAKAQCBS0MBQYtDgMGACgGAgYtDgMGACgGAgYtDgMGKwIABQAAAAAAAAAACgAAAAAAAAAALQgBBicCBwQFABABBwEnAwYEAQAoBgIHLQwHCC0OAwgAKAgCCC0OAwgAKAgCCC0OAwgAKAgCCC0OBQgtCAEDAAABAgEtDgQDLQgBBAAAAQIBLQ4GBC0IAQUAAAECAS4KgEQABS0IAQYAAAECAScCBwEALQ4HBi0NAQgAKAgCCC0OCAEnAggECicCCQEBLgiARAACIwAAAdYMOAIICiQCAAoAAAJSIwAAAegtDQYBCjgBBwIkAgACAAACAicCCAQAPAkBCCcCAQQKLQgACi0MAwstDAQMLQwFDS0MBg4AEAABACUAAAO6LQQAAC0NAwEtDQQCLQ0FBy0OAQMtDgIELQ4HBS0OCQYBKAACgEUAAy0NAwEmACgBAgsAOAsCDC0NDAotDQULLQ0GDAo4DAcNJAIADQAAAn4nAg4EADwJAQ4LKAALgEMADCQCAAwAAAMNIwAAApMtDQMLLQ0EDC0NBQ0tDQYODSgADYBDAA8kAgAPAAACuCUAAATNLgQAC4ADKACABAQABCUAAATfLgiABQAPACgPAhAAOBANES0OChEBKAANgEUACg44DQoLJAIACwAAAvglAAAFbS0ODwMtDgwELQ4KBS0ODgYjAAADgCcCCwQMLQgADC0MAw0tDAQOLQwFDy0MBhAAEAALACUAAAO6LQQAAC0NAwstDQQMLQ0GDS4EAAuAAygAgAQEAAQlAAAE3y4IgAUADgAoDgIPASgAD4BEABAtDgoQLQ4OAy0ODAQuCoBFAAUtDg0GIwAAA4ABKAACgEUACi0MCgIjAAAB1igAgAQEeAANAAAAgASAAyQAgAMAAAO5KgEAAQX3ofOvpa3UyjwBAQImJQAAA5EuCIBEAAUjAAADyg0oAAWAQwAGJAIABgAABDojAAAD3y0NAQUtDQIGLQ0DBy0NBAgtDQYJACgJAgktDgkGJwIJBAQtCAEKJwILBAUAEAELAScDCgQBACgGAgsnAgwEBAAoCgINPw8ACwANLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEUABiQCAAcAAARYIwAABMQtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAATfLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABMQtDAYFIwAAA8oqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAT6IwAABQUuAIADgAUjAAAFbC4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVYLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAUnKAGABQQAAQMAgAYAAoAGIwAABWwmKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "1Z3RTuMwEEX/Jc998Niesd1fWa1QgYIqVS0qZaUV6r+vEzWl2wRHsVB15wUR8MWng3099rTJZ/O8fvx4fdjsXvbvzfLXZ7PdP62Om/0uX32eFs3jYbPdbl4frn/cmPaLtakTvL+tdu31+3F1ODbLEKJdNOvdc7OMRDb/iZfNdt0sE59+LxrrXI0oVoi8HRMRMaezKn8f/EVm+bQYNHfBnBt7d9XUjDS1lvjc1uaXWW7MPpzbso/XTTvyoJWcSS25aCUXtTEXtTEPamMeWC150koevVryqJU8ObXkyKu/XNrK/00zuSPk0VIkt8i5Yplc7WhxamPu1MYcek9UJkfOFYvkbNSSI+eKZXLkXLFILl4tudrVPyDnimVynJWoxYk42+IOB2fNaHESzkLQ4eA4TYeDY9kZxxscT+hwoCa6J5w8ssPBWXpaHKDdZIeDNXaA9n0dzt0XCf7CEbnF8QYLh6FwAlZ07n48GnzfNh/k1zdu2ZMFZieJvqcIxg7Yg1p2NqyXnYxido/MHlJfEaBIMmBPetmtU8wO7TNldkeK2aE9coJd8Vz1ij3SK447K/ZIVuyRotgjRbFHiuK5GhTP1aB4rkbouZqc6ymSH7JDj/cy+93LBM72wyCf1vEAJyHhiIGKjph7H0g5chccKxMDzVxGJZmYbtnvXlP4SXZBZie+HIxQuD0YEUuK2ZNeducVs0P7DEXpKawZzFWGHjPeUk+R64i37OIUswe97AHaIyfYWS97VDzek+Ixk6DzmXxO2VNwoBv2XPpRzA69NpXZ715g+0F2axSzQ/t7md0pjjt2/s7pcqgjdPump+CxPbLMDp1HltkZe64W2QV7rpbZFc9Vgd5rl9mDYp+J0Pm7+zq0d2wH7ND5e5k9QfvMBDu0z0ywQ/tMkT1i7/km2PXO1Uh6PTJi12zK7Nj71Ql2vR4ZrWKPdNgeKfHCHmnAjh33IruH3vOV2RnbZ8rs2P5eZBfsdbXMDn2GXWYPeutNMeitr0bsvfYEu+K4A9X5Mk4a/3hnPnk8a/I53q1kvMqapO8mhUEviedL0lwJmfE7CExownwNUYVG5mu+2XMU3xiXVVylSjWqbyoyU6qqvnxVX76qL67qi6v6kqr/l1T19c1qO6UKNapo51pL1ozPEtt/JDz5oWa+HxGNv/O12A/RfDYan8ETGl+hifNj4FyFpqKf8cpniv04SMkNNWG+hiv64SlXHtFIxXiT+asMBV+hmb9qUuT5mvGKwYSmpp/5r8dWZAG2Iguwc7OAU776szpsVo/b9flW/y8fu6erO/8f/76tbx4C8HbYP62fPw7r9nEAX08CaMNvvV9Y4cziuquF850f5gsKcUHRdSFsfyeSW8ZMkCn+AQ==",
      "brillig_names": [
        "poseidon2_hash"
      ]
    },
    {
      "name": "sha256_hash_256",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 256,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_256"
      ]
    },
    {
      "name": "keccak_hash",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 10,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "1ZzdaiM5EIXfxde+UEklVSmvsiyDkziDwTjBSRaWkHdf2evuTkaNBUPpjPsmdIeSPx39Vksqfawet/fvP3/sDk/Pr6u7vz5W++eHzdvu+VDePj7Xq/vjbr/f/fzx9d8rd/oTQjgneH3ZHE7vr2+b49vqTkT9erU9PK7ulMiXn3ja7beruxw//16XRPIbidj/TqI0l4goxnxJVZ6Fx2Q+fq4r8xTixTiFNJqGlM6ISP0RsTsiuf6I/iqkvwrpr0L7q1CAitwdkbk/Qnsj2HUfo5hcf0T3FsW+vwrP/RHd+wVHMUAIDxOrRK4QJsMgeUeDtQ9aQ7IJhOMIEVdBlAGQ7BAQ6Q+JziMgCoBQQEAQSrxNnagbrANxDREAJCCUBAVAOAIg0SEgCQBJhIAglAiiTsRk0mI/TPHlMdSQDIBoQEAUAMkIJRmgJLmAgCCUEEIJCQBiM8e3IAkACYyAIFoXI1oXI5REROuKiH5i40hEGj9MY3A1JAIgNo7EdYg4gBKxGVZUeLBWiRUkOAQkAiCMUMIIJRGhJCKUJISSxAhIBkAkACBKCAiidWVE68oQJYDWpQ7QT9TEq/dlPrxYe0rVCreauKk++GF50JcN+QrCHgFJAIjJXnsTYtFPPIfBuizeyjfIzF4LDU1RQh5tKf+fn3xb+TGZpSzzc2PlIzdWPnJj5aM3Vj4mk++1/JwhFqIDiV6sy2OuIdofkk0WB5sQhBJCKCGEEo9Q4hFKTDYAmxABQJgQkAyARETriojWlRBKEqJ1CaCfkDM57BG8G1Zsy2OoKSbnuoonP6xBhsA6Q4kQLSYd0o9fKMGHGYrJFkqbAtFisonyjcJ+hmIyvHiZKJkaTmfkMOzhR+bplB7pnIeaaciIlPnpq/E5/zZj8B/Mvyw7/8kvPP8LL39ZePnLwstfF17+OS46/8UVW3j+07LzT8tu/2Sym1F8bJ187NqXIxu/NNBYSoFSTTFZoG99L5DJsnJTi8lG6fd6kRmKIigK0ZIJQjEZr0Kc2liiiuIdQSgQLeQglIig2KynNikKGMe80ZjcoDBBKAlBMTkM2aYIgpIgWhKkXgSxTuhttievn/soFEVQssnJj2nN03uaowiAEpyHUEyOsRQnZayXXK+rB5OviTYlIyieERST071tSkRQGKKFIfXCiqCYzGLFevD5i3HtjwWjA/d5tE7OzVAYQskIik3wXpoiOlId0VEogqCYzJUtCtvEW6QpHjzVlzMQ2wRcyHjJBMnMag/bRFw0KSb9RTSMlJxmKBlBYYgWttGSxuPRonXfZ5uwixbFZuRvUgRBsQmKaFIUQVGIFoXUi8mKYosSISN/dBlBsQmrblJs5v2cxnqhmXqxCaxuUiBabMITWxSb+MQmRREUm8tNWhSboOSk0whDNENJCIpAtNjcL/aV4mfqRW1asuSJMqPFJoQwpesUmxjCJoUBPn+0iSJsUIyuOWlRqPtlfOVL06JPig6DmOQ5RurPCAAdJnOkjN2kfIzVDJPdsBZD+zNMTp22GLk/wyRkscUA6BBAfZicVLzC+Cyv/2yOu839fnu5X/zp/fDw5brxt39ftr/cPP5yfH7YPr4ft6c7yKfrx09TXtkaWJed9lPeT2/Rr8tCbnk7FRW7dTw9n88mlJ2KdfD59Hq2FCqWoeSn5Ok/",
      "brillig_names": [
        "keccak_hash"
      ]
    },
    {
      "name": "sha256_hash_40",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 40,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_40"
      ]
    },
    {
      "name": "sha256_hash_2048",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 2048,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_2048"
      ]
    },
    {
      "name": "pedersen_hash_with_index",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 10,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "3Z3ZTiNJEEX/xc9+yFhy41dGoxaLaVlCgFhGGiH+fQoGV7sp5FRLUVe3+6WF6YQT15l5I3Kh/LK52l08f/+2v72+e9yc/fWyubm7PH/a391Or15et5uLh/3Nzf77t+Nvb9LbP5r1/Qce789v314/Pp0/PG3ORHLu283u9ur96+rTL7ne3+w2Z5pft4vmmubWmkqaG0t//Xs7Mer6jCIARlmfUQE6KkBHA+hoAB0doKOvr8NSAjAygNHXZ8j6fmUqAAagPwwwrswBDMC4coAOb+szsgEYIXNQLB8YctT4g1EUwCjrM2JqhgEDoKMBdDSAjg7Q0dfX4UkAjLw+QxKA4eszVAEMwLgyQH8YYFzF1AynGQ4YVzE1w2lGTM0wYAB0AGoGL+vXPh5TM6jPDBM9ZiwbWyr1o/HUtnwKKKdGFpBnsoByIguoVa6AijpZQIVslpVONsuqkc2yWpUroBaz4xUYkBeygJpxBdSVzKl7JnPq3smcWpKRWbWkQubVIonMrEWczK1FKpldiwqZX4uy+eMUEdvIVqN7j9hKNVGne49itmtCI2LLIprJyjVRtvJo+g5bXgu6/BIZEdsW1hQRnUM2OodsdA7Z6Cq2TueQbPtGYonNIS2xZRETNoc0urWI0a1FjG4tYsrmkEFXwkIjonNIZ8si5nQOmemySKZzSLZDrCkiOoesdFmk0jkk3c6osR0cTRHRZZFO55CdLYsEXZQMjYgtiwRdwgyNiC2LuLA5pLPdqJkiYnNIN7Ys4kbnkHTntM52i0U802WRTOeQhS6LFDqHLHRZpNI5ZKXLIo3OIdmu94p3OofsbFkkJzaHzHS3xnLMOa2ZzBGZLiAxh3jW7QCZFnVLSMgcdZ+VTFXIZ0iJOWobQRBKxACQmBOlESQDIDF3YkeQAoA4Qokj+iQjRldG9ElBTMaYS9QDSMxe+wjSAZCGUNIQfRKzb53rDCnLQqLElH/FdIZ4/gypMbvLA0jM8fUAEnM7dgDJiLcrIzo+5hLoCFIBkIpQUhF90gCjqwlgMjYFTMZmiLfLAB3fXBEQwGRsGaEEYZCtIEYXwiBbRUzGmApyAGkZAOkJAYEoAfRJTyErrVLnraiqtoRUAEQUAUEoUYQSRSgxhBJDKHGEEkcoCaqFjyGL1W8PqoVPQ2Ks/vRefdDjCKz6DGlfQPrqEE3JEZCQ9Ynl8gPy0xD+4kSnzLs9Nm1SnW7c0iEbtuMBVb9oWvwgtGQ7bvquM+a44DfQ+ef0Zzv82mmXcaFT/5z+bOmjaU3L/lR8f9ZycHFrSRaOEbNE/7WIcj0VUcyJ0K9F5P1kRIUtoux0EXW2iGJOscznIsiyLSENAInZgxhAYmrGEaQAIDEHTCNIXR8iSREQQJ+ICAKC6BN1BKQDIDGPDRpAYp4ENIJAlCD6JBsCEnOjKx1aq2tfQGL+FHQAifnrzhEEoqQDIEGXSAYQhJKOUBLzbJXTEI05AhhBEEoEoSQox5+6vKuqBoDEPEdwBMkASNCKfQApAEhGKMmIPikIJUGr39OQipiMMel3AIlJvyMIQklH9EkHjC5LgD4JetzXCAIwSIs5HB9BADneDKHEEH3iaxcSr9Orf84f9ucXN7uPDy6+fr69PPoc46d/73efPtL4/uHucnf1/LB7+3DjH59r/BarSdua9Sn4NxtR35pPX8v//6VbkzohJ+x/",
      "brillig_names": [
        "pedersen_hash_with_index"
      ]
    },
    {
      "name": "sha256_hash_511",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 511,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_511"
      ]
    },
    {
      "name": "sha256_hash_90",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 90,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_90"
      ]
    },
    {
      "name": "sha256_hash_80",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 80,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIDJJwAABAMnAgIEUCcCAwQAHxgAAwACgFkdAIBZgFkCHQCAWoBaAh0AgFuAWwIdAIBcgFwCHQCAXYBdAh0AgF6AXgIdAIBfgF8CHQCAYIBgAh0AgGGAYQIdAIBigGICHQCAY4BjAh0AgGSAZAIdAIBlgGUCHQCAZoBmAh0AgGeAZwIdAIBogGgCHQCAaYBpAh0AgGqAagIdAIBrgGsCHQCAbIBsAh0AgG2AbQIdAIBugG4CHQCAb4BvAh0AgHCAcAIdAIBxgHECHQCAcoByAh0AgHOAcwIdAIB0gHQCHQCAdYB1Ah0AgHaAdgIdAIB3gHcCHQCAeIB4Ah0AgHmAeQIdAIB6gHoCHQCAe4B7Ah0AgHyAfAIdAIB9gH0CHQCAfoB+Ah0AgH+AfwIdAICAgIACHQCAgYCBAh0AgIKAggIdAICDgIMCHQCAhICEAh0AgIWAhQIdAICGgIYCHQCAh4CHAh0AgIiAiAIdAICJgIkCHQCAioCKAh0AgIuAiwIdAICMgIwCHQCAjYCNAh0AgI6AjgIdAICPgI8CHQCAkICQAh0AgJGAkQIdAICSgJICHQCAk4CTAh0AgJSAlAIdAICVgJUCHQCAloCWAh0AgJeAlwIdAICYgJgCHQCAmYCZAh0AgJqAmgIdAICbgJsCHQCAnICcAh0AgJ2AnQIdAICegJ4CHQCAn4CfAh0AgKCAoAIdAIChgKECHQCAooCiAh0AgKOAowIdAICkgKQCHQCApYClAh0AgKaApgIdAICngKcCHQCAqICoAigCAAEEgFknAgMEUC0IAQInAgQEUQAQAQQBJwMCBAEAKAICBC4EAAGAAy4EAASABC4EAAOABSUAAALWLQwCASUAAAMcJQAABFIAKAECAigCAAMEgKknAgQEIC4EAAKAAy4EAAOABC4EAASABSUAAALWKAIAAgSAqScCAwQgOw0AAgADAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAAMbLgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAAALqJikAgEMEagnmZykAgEQEu2euhSkAgEUEPG7zcikAgEYEpU/1OikAgEcEUQ5SfykAgEgEmwVojCkAgEkEH4PZqykAgEoEW+DNGS4AAAGASygAgEwEAAkBAAABgEwAASgBgEsEAAEBAIBLAAKATC4AgEyATS4CgEOATQEAgE0AAoBNLgKARIBNAQCATQACgE0uAoBFgE0BAIBNAAKATS4CgEaATQEAgE0AAoBNLgKAR4BNAQCATQACgE0uAoBIgE0BAIBNAAKATS4CgEmATQEAgE0AAoBNLgKASoBNKACATAQAQCgAgE0EAAQoAIBOBAA4KACATwQAECgAgFAEAA4oAIBRBAEAKACAUgQAAygAgFMCAAAoAIBUBAAAKACAVQEAASgAgFYEAAEoAIBXAgAIKACAWAQAUCYlAAANTi0NAQMAKAMCAy0OAwEnAgUEBi0IAAYtDAEHLgiAWAAILgiAVAAJABAABQAlAAANdy0EAAAtDAcDLQwIBC0NAwUAKAUCBS0OBQMuCYBLAAUAKAUCBS4GAAWASy0IAQUnAgYECQAQAQYBJwMFBAEAKAMCBgEggEsAAgAHACgFAghAPwAIAAcABicCBwQILQgACC0MAQkuCIBYAAouCIBMAAsAEAAHACUAAA13LQQAAC0MCQMtDAoGLQ0DAQAoAQIBLQ4BAwcoAAaATQABDSgAAYBPAAckAgAHAAAFNyUAABA1ACgDAggAOAgBCS0NCQcnAgkEBAY4BgkKBDgKCQsCOAYLCAMwgE0ACAAJDygACIBNAAokAgAKAAAFdiUAABBHHAwJCwIcDAsKBBwMCgkCBTCAVwAJAAonAgwCAAo4DAkLJAIACwAABbkGOAoJDgsoAA6AVwANJAIADQAABbklAAAQWRo4BwoLJwIHAgQMOAkHDCcCCQIgJAIADAAABeUjAAAF2i4IgFQAAiMAAAYFGDgLCgQMOAoJCyQCAAsAAAX8JQAAEGstDAQCIwAABgUDMIBSAAgACg8oAAiAUgALJAIACwAABiIlAAAQRxwMCgsCHAwLCAQcDAgKAgw4CgcIJAIACAAABk4jAAAGQy4IgFQABCMAAAanBTCAVwAKAAgnAgwCAAo4DAoLJAIACwAABoIGOAgKDgsoAA6AVwANJAIADQAABoIlAAAQWScCCgSAGDgKCAsMOAgJCiQCAAoAAAaeJQAAEGstDAsEIwAABqcAOAIECw44AgsMJAIADAAABr4lAAAQfS4EAAOAAygAgAQEABElAAAQjy4IgAUAAgAoAgIEADgEAQwtDgsMDSgABoBOAAEkAgABAAAHPyMAAAb5LQ0CAQAoAQIBLQ4BAi0IAQEnAgMECQAQAQMBJwMBBAEAKAICAwAoBQIEACgBAgZAPwAGAAQAAy0MAQguCIBUAAojAAAHZgEoAAaAVgABDjgGAQMkAgADAAAHWSUAABB9LQwFCC0MAQojAAAHZi0NCAEAKAECAS0OAQgtDQIBACgBAgEtDgECLQgBAQAAAQIBLQ4CAS0IAQMAAAECAS0OCgMnAgUEBAY4CgUGBDgGBQsCOAoLBAsoAASAVAAFJAIABQAACNojAAAHwwcoAAqATQAGAzCATQAEAAsPKAAEgE0ADCQCAAwAAAfoJQAAEEcNKAAGgE8ABCQCAAQAAAf9JQAAEDUAKAICDAA4DAYNLQ0NBBwMCw0CHAwNDAQcDAwNAgUwgFcADQAMJwIPAgAKOA8NDiQCAA4AAAhOBjgMDRELKAARgFcAECQCABAAAAhOJQAAEFkaOAQMDgw4DQcEJAIABAAACHAjAAAIZS4IgFQABSMAAAiQGDgODAQMOAwJByQCAAcAAAiHJQAAEGstDAQFIwAACJAuBAACgAMoAIAEBAARJQAAEI8uCIAFAAQAKAQCBwA4BwYJLQ4FCS0OBAEAOAoLAg44CgIEJAIABAAACNElAAAQfS0OAgMjAAAI2i0NAwQHKAAEgE0AAy0MAwIjAAAI7w0oAAKAUAADJAIAAwAADPgjAAAJBCcCAwICJwIEAoAtCAEFJwIGBAkAEAEGAScDBQQBACgFAgYtDAYHLgqAUwAHACgHAgcuCoBTAAcAKAcCBy4KgFMABwAoBwIHLgqAUwAHACgHAgcuCoBTAAcAKAcCBy4KgFMABwAoBwIHLQ4DBwAoBwIHLQ4EBycCAwQCJwIEBAguCIBUAAIjAAAJjgw4AgMGJAIABgAAC1gjAAAJoC0NAQMtCAEBAAABAgEtCAEFJwIGBCEAEAEGAScDBQQBACgFAgYnAgcEIAA4BwYHLQwGCQw4CQcKFgwKCiQCAAoAAAn0LgqAUwAJACgJAgkjAAAJ0y0IAQYAAAECAS0OBQYtDQgFACgFAgUtDgUILQgBBScCBwQJABABBwEnAwUEAQAoAwIHACgIAgkAKAUCCkA/AAoACQAHLQ4FAScCAwQgLgiAVAACIwAACkwMOAIEBSQCAAUAAApjIwAACl4tDQYBJi0NAQcAKAcCCQA4CQIKLQ0KCBwMCAcAJwIJAQAtCAEIJwIKBAUAEAEKAScDCAQBACgIAgonAgsEBEMDsAAHgFEACwAJAAoFMIBNAAIABy4IgFQABSMAAAq8DSgABYBNAAkkAgAJAAAK4iMAAArRASgAAoBWAAUtDAUCIwAACkwtDQYJADgHBQoOOAcKCyQCAAsAAAr9JQAAEH0AKAgCDAA4DAUNLQ0NCww4CgMMJAIADAAACx0lAAAQNS4EAAmAAygAgAQEACElAAAQjy4IgAUADAAoDAINADgNCg4tDgsOLQ4MBgEoAAWAVgAJLQwJBSMAAAq8BSgAAoBNAAYtDQEHATCAUAACAAkMOAYECiQCAAoAAAt+JQAAEDUAKAUCCwA4CwYMLQ0MCgEoAAaAVgALDjgGCwwkAgAMAAALpiUAABB9DDgLBAwkAgAMAAALuCUAABA1ACgFAg0AOA0LDi0NDgwAOAYDCw44BgsNJAIADQAAC90lAAAQfQw4CwQNJAIADQAAC+8lAAAQNQAoBQIOADgOCw8tDQ8NASgABoBSAAsOOAYLDiQCAA4AAAwXJQAAEH0MOAsEBiQCAAYAAAwpJQAAEDUAKAUCDgA4DgsPLQ0PBhwMCgsEGSgAC4BXAAocDAwLBAA4CgsMDjgKDA4kAgAOAAAMYCUAABB9GSgADIBXAAocDA0LBAA4CgsMDjgKDA0kAgANAAAMhCUAABB9GSgADIBXAAocDAYLBAA4CgsGDjgKBgwkAgAMAAAMqCUAABB9DSgACYBPAAokAgAKAAAMvSUAABA1LgQAB4ADKACABAQAESUAABCPLgiABQAKACgKAgsAOAsJDC0OBgwtDgoBASgAAoBWAAYtDAYCIwAACY4tDQEDDSgAAoBPAAQkAgAEAAANESUAABA1LgQAA4ADKACABAQAESUAABCPLgiABQAEACgEAgUAOAUCBi4KgFQABi0OBAEBKAACgFYAAy0MAwIjAAAI7ygAgAQEeAANAAAAgASAAyQAgAMAAA12KgEAAQX3ofOvpa3UyjwBAQImJQAADU4tCAEFJwIGBBEAEAEGAScDBQQBACgFAgYnAgcEEAA4BwYHLQwGCAw4CAcJFgwJCSQCAAkAAA3DLgqAVAAIACgIAggjAAANoi0IAQYAAAECAS0OBQYMOAIDBSQCAAUAAA5CIwAADeIBKAADgEwABw44AwcIJAIACAAADfwlAAAQfQw4AgcIJAIACAAADhkjAAAODi4IgEwABSMAAA45AjgCAwcOOAMCCCQCAAgAAA4wJQAAEEctDAcFIwAADjktDAUEIwAADk0uCIBUAAQjAAAOTQcoAASATQACLQgBBQAAAQIBLQ4CBScCCAQEBjgECAkEOAkICgI4BAoHCygAB4BUAAgkAgAIAAAOriMAAA6LASgAAoBWAAcOOAIHCCQCAAgAAA6lJQAAEH0tDgcFIwAADq4tDQUHLgiAVAACIwAADr0MOAIHBSQCAAUAAA7YIwAADs8tDQYBLQwEAiYtCAEIAAABAgEuCoBUAAgFKAACgE0ACQcoAAmATQALCjgLAgokAgAKAAAPCSUAABBZLgiAVAAFIwAADxQNKAAFgE0ACiQCAAoAAA+BIwAADyktDQYFLQ0ICQ0oAAKATwAIJAIACAAAD0YlAAAQNS4EAAWAAygAgAQEABElAAAQjy4IgAUACAAoCAIKADgKAgstDgkLASgAAoBWAAUtDggGLQwFAiMAAA69ADgJBQsOOAkLDCQCAAwAAA+YJQAAEH0MOAsEDCQCAAwAAA+1IwAAD6ouCIBTAAojAAAP+AA4AwsMDjgDDA0kAgANAAAPzCUAABB9DSgADIBYAAskAgALAAAP4SUAABA1ACgBAg0AOA0MDi0NDgstDAsKIwAAD/gtDQgLGSgAC4BXAAwcDAoLBAA4DAsKDjgMCg0kAgANAAAQICUAABB9LQ4KCAEoAAWAVgAKLQwKBSMAAA8UKgEAAQXFa8RaDhAAAjwBAQImKgEAAQUohpKwR9z9QzwBAQImKgEAAQVkYYioxs+UyzwBAQImKgEAAQXJb5M7E53pFjwBAQImKgEAAQVFp8pxGUHkFTwBAQImLgGAA4AGCwCABgACgAckAIAHAAAQqiMAABC1LgCAA4AFIwAAERwuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAARCC4BgAqACC4CgAiACwEAgAoAAoAKAQCACwACgAsjAAAQ1ygBgAUEAAEDAIAGAAKABiMAABEcJg==",
      "debug_symbols": "7Z3bThw5EIbfhWsufKyy8yqrVUQSEiEhiAhZaRXx7uthM+4OdlMzpjP+PelcRDPQRdf3l8/HHxefrj98//L+5u7z/beLd3/9uLi9/3j1eHN/l779eLq8+PBwc3t78+X9/McXavefTv+eLb59vbrb/eDb49XD48U7rb2PlxfXd5+eP7NLf+Xzze31xTvjny6Lx2MI+4eVjvlZS67ysPNR/3zakaJfnv77cueSh3PJKDyX3MldIhuySyFUXIpwLlmL5xLDueTwVHJ4acnj5TiPpxLhpSXCy3Gs8VzycC4FhecSXiEQ8VSKcGnJqNPnOFZm7xJbV3HJw7mkFZ5LeCoZPJUMnkod2t6iSwHOJUendslru//TPtVnpUte47nk8VyKcC4RnkqMl5YYL8cFPJUCXloKeDkunryO805ll5xWFZcYzSWrDJ5Lpy8EWO9bAp6tL13SDs4lY+BcsgrPpdMXlRz83qWgdOmSU3guAap0+gqFSWWXjBOe3hXm2ROrlCkRvBsfYfwo0PhRIPwoUHgdgXl4hA6t7rUROjSJV0cI4AhWeT0hUIngFHoUDkAYPwoaPwqGZghWzDvsMnIaSNHS896HTJqgYymR0ZtEkkS0SSRIZLdUJEqE3sDrL5Fzm0SCRN5sEgkSkdokkiRC7+acQCKVJSJVDlCneeOzk8jamUSSN9qlIbv98y7oSuuazy8VrSyRV+dX6R8rkQ+TRFwuDPM9pl1Gk2hLRZJEBn3ssb9EDr+PFlyWSBsjIus8yZw+O19Bxs84ayN7/IywNvIArdm1kQdonR6LTDPkoCvI5xdlCTn8eVGGn4A7HnmapEjI8vNSn4IGaDD/bomIZ00dLiUy+KNk3SU6v3bC2hLZLRVJErnzq6FWl2ir0SSJPP40fW+J6Pw676tLhD9N/7slEoaAiLdUJEq0pSJJorClIlGi8xt4XFkixl8hqc20TjVN5VUQ4FdIigj4KyRFBPwVjDJCh0onL5hII6tla4p7dH4llyKcSz1WrAkueYXnkodzifBU6rCJKfp9n8rHUE4zcYfReNGlCOdSxAvc6XfQkMqbPUnrMnmH029Cl11iOJc0nkoaTyWDp5LBU8niqXT6lkCaLuXs0otlV88unf7ATNmlAOfS6YfFRJdOX+3KLsEFLiq45B07VLuSS6c/hl12CS7HxdOfu0g6P03mxchJ+XQai9kPagYz2w+sw0//3eD+x7H9t3Zw/3ls/50Z3H/C9n+3kiF7Qr5yIkH0enyE8aNA40eB8KPAekIIFYQAXpxqommSlFiV/dkYPToCmykhsSsusjFKgVfKByBo+OwsI4A37Q5AQG9dH4BgwRtIByA48D7aIQj4hWqgCSGGEsHjR0FEOIMowBeqQeVjKChoXSIQfKEqI4wfBcav2maN7Ze7xirPr32kjFEBv+rsLhF8f6e7RHFLRYJEWuE3LbpLhN906S2Rxu/195bI4I8qdJcIfhDy90v06jlyRtvzS0XrHpJmNJ1fjbbu2U1JovOr0daWiLdUJEoUNokEiQbogPjZqBfVEPCjLCCYARrwEoLGL45EBPzWnYQwQBteRBg/Cnb8vGAd/CC25anqLPeXJQT8cXgJwY0fBQ/fwJAR4MexRQT81VNxGoigSK5EwO/viAj4EyJxOnSIIpcjYFahN7ZZTwiso3TuNMU8WkNxtoNLh8rDr6/XNRZ+kLmrOFvKWRbHoNeSXcVBLzZ7igO/hK+rOFvKWRYHfXdMX3HQG8w9xYHv03UVZytzlsWhrYX8ijhbC3lZHPglqV3FQR/q7ClOQJ9c6ylORB9V6yrO1ghcFMcp9KnGruJsjcBlcfTWfXhFnK3MWRYHfnlDT3HwhyyMzscLpM/FMZ7Gwe/+Y+PthBBUBeH0nTiTD0elNMX4hqefAdiMDsDYALsjGHMiSp/LiWJ3+hsn1keg4RHi+FGIw0fBq+Gj4NX4UdDjR0H74RE6HEi5OoIbHsGCt5AOQQBvpR6A4Oz4CONHwY+fF/zw/QVP49fONH7tzOPXzh1mWY9EYO0zAntdQYAvVEWEAF+1yQjjRyGOH4U4fBRIDR8FUuNHQcOPYIgIFh4hqOxJCLqcWyAPXzvHWRSirUShwxGVa0eB4Euk4KYoBG8rCPAlkojA40cBf6LqF4TyVH5DAb77H/KkefrMXvrrK07IUxggvt3EwZ9c6ykOflulmziMPyHYU5wt5SyLgz+J2VOcLeUsi2Pguy3R6KnnZcpbJhh/sinEqecVK2eLMuFHQej/Mv6yKDEKEX6a45e8YGsI8JNNEkJQw0ch4I+LiggafhQi2qnSjM5VEPCjICGY8aNg4McKRAT8ZVEigsMvVEUE/KpNaCMFD99NkxHwC1UJAX+aQ0YYvr8Q8BfkyAjjRwF/QY6MgN/AEBCiOn1eOHZ3oM1/nI0rp/wi/tZnGQF/mynN9mhWDjGN8Df3HoAAf+KLiIB/OJ+IgH+EnlX5oHe2xlQQ4KMgIuAfRycjwBeq1s0QfLl3P+Lv3ZcR4AtVEYHxs7OEAH+z7gEI40chwp+aJiBYBX9zLFs7R6AKAn4UJAT4i6EOQMCv2qZrOdPnWEHAr9okBPxem4iAf1i7jIBftUkIA/TaJASPX6iKCPhVG88QoioR4C/yPQDhDKIAX7W52bl3ztgSAb/XJiLg99pEBPyzkGUE+OwsIWj8XpuMAH+Qv4iAf5WZU3MEV0HAj4KEYMaPAv7lXSZMszzOStsKtLM6P+8qg/np1/iTvMciWz8hv9hcX3teuHbeagdfyB8tkXeTRFQpUR181fymVFFDxu+lro/850UZ/06n9ZHhmxZHIzNNyNG8vYRn/GVCx0oUp1SRmj0lcoC/neAtqaKOfH5RlpDjnxfliL/YbGVko9y5ITvNE7K1T28t4c0Aa1mPlcjOUoXzFeSz68z+kipqyPg3k6+P/OdF2Z5dt0VEHnsI4n+Eobshzwj4C19FBMJvEL5+aVVCwC/xJAT8+4FlBPxmtoSAf9euiIA/CywjnEEUhs8LVuGPi0oIBj0vUJzu26RYbtFKCPD1glJ5XDF9LpcfW/z5RBEBv7EtI6AXqhSjmiGUE9PWo7dUD0BA7/LICPDzZQcgoNfOMgJ8f+EAhPGjAN9fOABh+Ci4+gZqIru3Sx91xYyazOrjJbJZ29u47W3c9rbQ9rbQ9rZ6V1U2821mscXMK24yqy9Alc1Ck5lpe5tpY7OmzayeSjjvgyXmshPn67fGsMpLgFnZsr3rybSZcZMZ+yazUM8BMZ9hWzUjFetvc5zNuAwAaddm1vY2w01m9eKVbV6oy9ZUJKk36USz+jUsslloMqtvMuFpvRanlFQx4yaz2Pa22PQ2VvLbyhtYLJuFAITJLJaT92x1mxk1mTnXZhabzOp9xN3y9L3Zy/UPz2YLSVkyq68H4uD3RwdzqCwhXDi/OZXlIb+NYsXMtZnFJrP6lelM+aQ2TqVUabaQJiWzhTQpmlGT2UKalMzqez5TmsupxMcym4Z6w5A52pxKKlV+qPePZLPYZLZQcglmUTU5GesHQ0gZZ+H8OdFsIU2KZqHJzLo2s9hk5tre5trYfFsAFhoY8/xWSyXs2sza3rbQUpDMFloKlM+PYypX0DllFgqFfHEJs3YVM2oys21vW0iTktlCmpTM6kMRotlCqSyaLdRvkSczX5rVL/qWzdreVr9KmTlP3qWPFbaFNDkvlfWbV4G6he266W/TK4V/MmupM5xeqDNEs7a3LdQZolloMrPmaLOn9PWfq4ebqw+319+S0e633+8+Pt7c3/38+vjv1/1vPjzc3N7efHn/9eH+4/Wn7w/X72/vP+5+d6F+/vdX6oBdste7Mi19S2pfaqPSt2fZfTCXPvDu664kYR0uOf326Sn58R8=",
      "brillig_names": [
        "sha256_hash_80"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "sha256_hash_512",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 512,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_512"
      ]
    },
    {
      "name": "sha256_hash_10",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 10,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_10"
      ]
    },
    {
      "name": "sha256_hash_70",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 70,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_70"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=",
      "debug_symbols": "rZJLioQwFEX38sYZ5P9xK0VTRI1FIESJ2tCIe+9YxELKpnri5JEXDpdDchdoXT0/7j52/QjVbYHQN3byfczbsiKokw/BP+7Ha8DbIOzJj4ON2zpONk1QEcwJQ+Bi+zwrmjM6HxxURqzohCstC6wxf6GS/oEKKgoqBH6hhKn1CwHhF8hopnYZYT7LcGYKyqU+yYgrZDTfZYz+LCPx/jKSypOMvEDGUFpgw8Q/MhoXVOG3b1rz+m2Tt3VwpV7dHJtD26afwb0Vb0h949o5ua2Ch/bleSMaUZZjc/Qv",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "keccak_f1600",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 25,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 25,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIB2JwAABAMnAgIEGScCAwQAHxgAAwACgEQdAIBEgEQFHQCARYBFBR0AgEaARgUdAIBHgEcFHQCASIBIBR0AgEmASQUdAIBKgEoFHQCAS4BLBR0AgEyATAUdAIBNgE0FHQCAToBOBR0AgE+ATwUdAIBQgFAFHQCAUYBRBR0AgFKAUgUdAIBTgFMFHQCAVIBUBR0AgFWAVQUdAIBWgFYFHQCAV4BXBR0AgFiAWAUdAIBZgFkFHQCAWoBaBR0AgFuAWwUdAIBcgFwFKAIAAQSARCcCAwQZLQgBAicCBAQaABABBAEnAwIEAQAoAgIELgQAAYADLgQABIAELgQAA4AFJQAAAVUtDAIBJQAAAZslAAABnAAoAQICKAIAAwSAXScCBAQZLgQAAoADLgQAA4AELgQABIAFJQAAAVUoAgACBIBdJwIDBBk7DQACAAMBAIADgAWABy4AgAOACC4AgASACQsAgAiAB4AKJACACgAAAZouAYAIgAYuAoAGgAkBAIAIAAKACAEAgAkAAoAJIwAAAWkmJiUAAAHJLQgBAicCAwQaABABAwEnAwIEAQAoAQIDACgCAgRBDwAEAAMtDAIBJigAgAQEeAANAAAAgASAAyQAgAMAAAHxKgEAAQX3ofOvpa3UyjwBAQIm",
      "debug_symbols": "tZJRC4MgFIX/y332Yabm6q/ECCsLQTTMBiP877tFbLE9+yKey9FzD3wbDLpbp9a40S9QNxtY36tovEO1JQJdMNaaqb2O4bYfnMrjwTIrt+slqhChplSIioB2w3GXHD8ZjdVQFyKRP7uk/DRLVn2stEoPAryg2RPK3AkseweWvQPP3oHn7ZBQPVUwqrP6BHtcXX/hPL5m/YP8HHyvhzXoHf4v9ww3FYKUAvemOGmkJPcCIzDmDQ==",
      "brillig_names": [
        "keccak_f1600"
      ]
    },
    {
      "name": "sha256_hash_50",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 50,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3bTiM5EIbfJddc+Fhlz6usViNgmFGkCEbArLQa8e7rMMSdwU4qLE33X5m+QR0wnfr+8qHKdrt/rr7cXP349nl9+/XuYfXpr5+rzd315eP67rZ8+vl0sbq6X28262+f93+9MtsfKcTnf3j4fnm7/fzweHn/uPpkbYz5YnVz++X5mkO5ydf15mb1ycWni6Z4ivxSOKVci3oKT39flK/IH/4VMXz8V6QRviKntCts7O/f0RaO1u9uHW0KQmkib15Kl0vb2E9euf2s2352yu1Xrn9Srn9Srn9Wrn/WrX82Vrn9pNt+a5Tbrzv+yU53/5Od8v7HK9ffK+9/gvL+f5RE9QPtZ2/CS2n2jlr7s277R0mx57Rfuf4JvP9hn2K1P6fG/ozefoOr+gfvX9tvjQefQBEBIvgIwCnaHUCZruoATF+FgqkAwZqOSRnOJAp4Jk2fO3DtjWIytjWJPZ5J00f4TKaa5KT2ab1xtLu5N69aaKe847Br0OWarFQ+Fl125SOZTkWaYRJPmUTW5LOTyPs9iSRrbChLNbvyIXFqJSKLLpF19ebexo6XidQjsH4vMHxbExFSmB6hdnmRI7cmZYNnEqOZ5IzDMynBmWQ9nkl4KvnpE6tcN1vEnGLHpAxnUgh4Jk1el8jULIbKANiaFB2eSQxnEuGpRHgqMZ5KyeCZFNFMKvPXk5tkA1eTOpOH3hs8kyKeSRnOpODxTEpwJs0w7Npamtyr1LItXZLV3epEKqNfLW3Ti/2k2/7p55RGtj8qtz/rtp+DcvsTtv2WYl2LLNd7BLULTV4/gn4vZP1eyPheYDsgpBYhWPDhuCyApFAR2LQ5SHDgPWox2w0ViQO1CB48qDsBIRj9CPDNWUSI8J2qiIAeYJ+CAB6jnoCAHqYWsxMNCO0+xIKA7wUJIen3An6kmkzdaUPJtvu1An6kKiOo90I0+EPbXrCdrJPK/48tYZW0QOeORPgBzNwS2aUWiRIttUiSyMFnzbNL5PHD+NklWmqRJNH0W3H0SYSf5ny4RMe3ysd4frXorVvlTb1/eH3/XxKdXy0aW6J0ft31yA9cxHx+g/7oEi21SJCIzFKLRImW7lqSyOFn+nFv7pR6CPhelhAU5DgSQsDvjkQEVo+Avu/xFAT9XlCwOCsigG+ALMOl52Ho7DzGRQy/10JG0O8F/G2EMgL+sqCEkOE71TxMZ1Gm0CAwfr4jIuCvGWUaKlLmdh6VPXqwzXZAYJul8zQo1wktynvPbtnUKSzs+mb4efhZxVlqzmFx4HckzioOerc5pzi01Jwj4iw157A4vNScI+KgB8xzipPQQ/FZxUGfy51TnIw+JzOrOOizPbOKs6QPB8VJJiziHBZnCQIPiwO/03tWcZYg8LA4Dn2pcVZxliDwsDjwm95nFWcJAg+LA//4/Jzi4M8EOlsPqSjX7QGeCX9iwUU/ICTTQZi+/bp6LCq5xO8o/QsgKwfIARtg21JrJSrXoYOQtCPkGR5EHh1Bvxesfi9Y/V5w+r3g9HthhuOjRkdg9Qgz7BMfHQE8QjoBIervkaL+Hon0e4H090isf1xgUo8ww5sERkcAT/1PQYAf2tjGisCxPQErZ/hOVUaAH9oEBGfw038ZQb8X8NN/GUG/F/DTfxHBw2dtIgJ+1pbqe6O3KyGmRcAPtvOeF7LveAE/2Ba9gB9spzB4IUXfIiT45iwj6PdChk95fkNo3+1QEOBTnlQXzcs1R+nu4y3IO2sU+Hc+ccIizmFx8GOV+cSxS805Is5Scw6L45aac0ScpeYcFifApy3Z2SHzcs27SpyN+P7NQ+aV2xNqncVfI5DyX4u/OU30Av7s9G9twbcIDn92WkbQ7wULn8KLCA5+IiX7YdDMIXQQ8L0gIeDPTssI8BMpIkLAH51FBPxOVULA39klxUgOP1IVEQi/U5UQGL9TFRHUr5e5hJ94igj6vZD1twX8lRoJwcMf58/O15uzC+2Sn8c/UUBEcPjPaNLeM5rtIaYFAb8iSQg+qEcI8AdIyAjwzdmbetA7e9eu4Hv4NwacgKDfC/BvDGAf9hBi7CDAH3kiIrB+L8C/zl1GgH+d+wkI+r0A/8YAESEY/KHN7yNQBwHfCxKC1e8Fiz+0DS93LddtpBrwszYZQb8X8LM2GQF/aJMQ8F/TISIoyNpEBPyhjfcQcrv6HwjfCyKCfi/gZ21h79y74HwHAb5TFRHwszYRIcM3ZxkBvjlLCBE/axMRLPwxpTIC/DG0wewjhBbB4XtBRDgDL+CvtaVhlSd46bECG7yt5UNvMj8qWJt7K7KPA/Krh+t75YXXzheJzq9WxDBIRJ0eFT/rfFet6CKfn5cl5PjneRk/Cx4fGX8bz1uRmQbk7N7fw/P51Yo81IoS9nSQz7pWdJHT+XlZRP7zvIz/YrqxkcnAJ49vRQ6WB2Tvn97bw5M5u1oR/F6tCO2OAsKf2HlXregin5+XJWT8iaPxkeHfkTg6ssd/XdIR5GeEgL8VX0RQPUXwjKAg5T/+0ipHhN/jiQj4YbmEoCBlFhHwxxEJIeGPCyKCfi/gr8XLCPD7FSUEhs93isg1zKPceUSLZzgt8I1eMKbOK5brdvsx479pWUTw8AGGjICeCFPOZg+hXZhm+HzhBAT0oU1GiOgBxgkI6FmbjEDo48IJCPq9wPrbAvyqn4ww/fEm0frdraNNQSjNgXb3LpedIG/6BapxAdL0y01jAwRwAKqnyzA5bgGmf0xxZACHXoVEAPRGLAFMv6IwMsD0x5m8ESCm3SbLEoK2A1miBA7AeTfjwqlzxFVi9F5IBCDlANM/xzQyQNZehTJ6L5SirQCd3aHZoI8DEoBFDyVEAPRQQgJw6BmZCIA+DkgAXrsHvPY2ELT3QlFTPtAZiXNED6clANLuAUbvhUQA9HGA6hmfTO0uZ2/ggzmur7nistjdAYDPiQUAC59SCgDwwRxlHgBiBwC+EQsA8MGcBDD9w8NvbQN1K1G57LSBoGlmzr776Rhv4IO/ZOnINEwB0D2X6g188CcCaPeA8slgbxL6uCECoE8CHAN4Kh//ubxfX15tbh7KP23/+uP2+nF9d/vy8fHf77u/XN2vN5v1t8/f7++ub778uL/5vLm73v5tZV5+/BUpXsREW2HKp2QusinXz5OdMdJFJLv9uHV5TFxK5mJBseI/",
      "brillig_names": [
        "sha256_hash_50"
      ]
    },
    {
      "name": "sha256_hash_60",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 60,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICtJwAABAMnAgIEPCcCAwQAHxgAAwACgFEdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIoAgABBIBRJwIDBDwtCAECJwIEBD0AEAEEAScDAgQBACgCAgQuBAABgAMuBAAEgAQuBAADgAUlAAACSi0MAgElAAACkCUAAAOOACgBAgIoAgADBICNJwIEBCAuBAACgAMuBAADgAQuBAAEgAUlAAACSigCAAIEgI0nAgMEIDsNAAIAAwEAgAOABYAHLgCAA4AILgCABIAJCwCACIAHgAokAIAKAAACjy4BgAiABi4CgAaACQEAgAgAAoAIAQCACQACgAkjAAACXiYpAIBDBGoJ5mcpAIBEBLtnroUpAIBFBDxu83IpAIBGBKVP9TopAIBHBFEOUn8pAIBIBJsFaIwpAIBJBB+D2aspAIBKBFvgzRkuAAABgEsoAIBMBAAJAQAAAYBMAAEoAYBLBAABAQCASwACgEwuAIBMgE0uAoBDgE0BAIBNAAKATS4CgESATQEAgE0AAoBNLgKARYBNAQCATQACgE0uAoBGgE0BAIBNAAKATS4CgEeATQEAgE0AAoBNLgKASIBNAQCATQACgE0uAoBJgE0BAIBNAAKATS4CgEqATSgAgEwEAAQoAIBNBAAQKACATgQADigAgE8EAQAoAIBQBAADJiUAAAxaLQ0BAgAoAgICLQ4CAScCAgQALQgBAycCBAQRABABBAEnAwMEAQAoAwIEJwIFBBAAOAUEBS0MBAYMOAYFBxYMBwckAgAHAAAD6i0OAgYAKAYCBiMAAAPLLQgBBAAAAQIBLQ4DBC0IAQMAAAECAScCBQQPLQ4FAycCBgEBJAIABgAABCYjAAAEGy4KgE0AAyMAAAQmLQ0DCCcCAwQ8JwIJBAEnAgoCACcCCwIILQwCByMAAARHDDgHCAwkAgAMAAALJiMAAARZLQ0EAy0NAwQAKAQCBC0OBAMnAgQBACQCAAQAAASFIwAABHwtDAIBIwAABKAKOAQGByQCAAcAAASXJQAADIMtDAIBIwAABKAkAgAGAAAEtiMAAAStLQwCByMAAATIKQIACASAAAAALQwIByMAAATIADgBBw0OOAENDiQCAA4AAATfJQAADJUuBAADgAMoAIAEBAARJQAADKcuCIAFAAEAKAECBwA4BwUOLQ4NDiQCAAQAAAVZIwAABRItDQEDACgDAgMtDgMBLQgBAycCBAQJABABBAEnAwMEAQAoAQIEASCASwACAAUAKAMCB0A/AAcABQAELQwDCC0MAgwjAAAFbScCAwQ9LgiASwAILQwDDCMAAAVtLQ0IAwAoAwIDLQ4DCC0NAQMAKAMCAy0OAwEtCAEDAAABAgEtDgEDLQgBBAAAAQIBLQ4MBCcCBwQEBjgMBw0EOA0HDgI4DA4FCjgFAgckAgAHAAAG4CMAAAXHBygADIBMAA0DMIBMAAUADg8oAAWATAAPJAIADwAABewlAAANNQ0oAA2ATQAFJAIABQAABgElAAANRwAoAQIPADgPDRAtDRAFHAwOEAIcDBAPBBwMDxACBDgLEA8nAhICAAo4EhARJAIAEQAABkwGOA8QFAo4FAsTJAIAEwAABkwlAAANWRo4BQ8RJwIFAgQMOBAFEiQCABIAAAZxIwAABmgtDAIHIwAABpYYOBEPBScCEAIgDDgPEBEkAgARAAAGjSUAAAyDLQwFByMAAAaWLgQAAYADKACABAQAESUAAAynLgiABQAFACgFAg8AOA8NEC0OBxAtDgUDADgMDgEOOAwBBSQCAAUAAAbXJQAADJUtDgEEIwAABuAtDQQFBygABYBMAAQtDAQBIwAABvUNKAABgE4ABCQCAAQAAArVIwAABwonAgQCAScCBQLgLQgBBycCDAQJABABDAEnAwcEAQAoBwIMLQwMDS0OCg0AKA0CDS0OCg0AKA0CDS0OCg0AKA0CDS0OCg0AKA0CDS0OCg0AKA0CDS0OCg0AKA0CDS0OBA0AKA0CDS0OBQ0nAgQEAicCBQQILQwCASMAAAeGDDgBBAwkAgAMAAAJRCMAAAeYLQ0DBC0IAQMAAAECAS0IAQcnAgsEIQAQAQsBJwMHBAEAKAcCCycCDAQgADgMCwwtDAsNDDgNDA4WDA4OJAIADgAAB+otDgoNACgNAg0jAAAHyy0IAQoAAAECAS0OBwotDQgHACgHAgctDgcILQgBBycCCwQJABABCwEnAwcEAQAoBAILACgIAgwAKAcCDUA/AA0ADAALLQ4HAycCBAQgLQwCASMAAAhADDgBBQckAgAHAAAIVyMAAAhSLQ0KASYtDQMIACgIAgwAOAwBDS0NDQscDAsIACcCDAEALQgBCycCDQQFABABDQEnAwsEAQAoCwINJwIOBARDA7AACIBPAA4ADAANBTCATAABAAgtDAIHIwAACK4NKAAHgEwADCQCAAwAAAjRIwAACMMAOAEJBy0MBwEjAAAIQC0NCgwAOAgHDQ44CA0OJAIADgAACOwlAAAMlQAoCwIPADgPBxAtDRAODDgNBA8kAgAPAAAJDCUAAA1HLgQADIADKACABAQAISUAAAynLgiABQAPACgPAhAAOBANES0ODhEtDg8KADgHCQwtDAwHIwAACK4FKAABgEwADC0NAw0BMIBOAAEADgw4DAUPJAIADwAACWolAAANRwAoBwIQADgQDBEtDREPADgMCRAOOAwQESQCABEAAAmPJQAADJUMOBAFESQCABEAAAmhJQAADUcAKAcCEgA4EhATLQ0TEQA4DAQQDjgMEBIkAgASAAAJxiUAAAyVDDgQBRIkAgASAAAJ2CUAAA1HACgHAhMAOBMQFC0NFBIBKAAMgFAAEA44DBATJAIAEwAACgAlAAAMlQw4EAUMJAIADAAAChIlAAANRwAoBwITADgTEBQtDRQMHAwPEAQYOBALDxwMERAEADgPEBEOOA8REyQCABMAAApGJQAADJUYOBELDxwMEhAEADgPEBEOOA8REiQCABIAAApnJQAADJUYOBELDxwMDBAEADgPEAwOOA8MESQCABEAAAqIJQAADJUNKAAOgE0ADyQCAA8AAAqdJQAADUcuBAANgAMoAIAEBAARJQAADKcuCIAFAA8AKA8CEAA4EA4RLQ4MES0ODwMAOAEJDC0MDAEjAAAHhi0NAwQNKAABgE0ABSQCAAUAAAruJQAADUcuBAAEgAMoAIAEBAARJQAADKcuCIAFAAUAKAUCBwA4BwEMLQ4CDC0OBQMAOAEJBC0MBAEjAAAG9S0IAQ0AAAECAS0OAg0FKAAHgEwADgcoAA6ATAAQCjgQBw8kAgAPAAALVSUAAA1ZLQwCDCMAAAteDSgADIBMAA8kAgAPAAALyCMAAAtzLQ0EDC0NDQ4NKAAHgE0ADSQCAA0AAAuQJQAADUcuBAAMgAMoAIAEBAARJQAADKcuCIAFAA0AKA0CDwA4DwcQLQ4OEAA4BwkMLQ4NBC0MDAcjAAAERwA4DgwQDjgOEBEkAgARAAAL3yUAAAyVDDgQAxEkAgARAAAL+iMAAAvxLQwKDyMAAAwjDDgQAxEkAgARAAAMDCUAAA1HACgBAhIAOBIQEy0NExEtDBEPIwAADCMtDQ0QGDgQCxEcDA8QBAA4ERAPDjgRDxIkAgASAAAMSCUAAAyVLQ4PDQA4DAkPLQwPDCMAAAteKACABAR4AA0AAACABIADJACAAwAADIIqAQABBfeh86+lrdTKPAEBAiYqAQABBclvkzsTnekWPAEBAiYqAQABBUWnynEZQeQVPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAzCIwAADM0uAIADgAUjAAANNC4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAA0gLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAzvKAGABQQAAQMAgAYAAoAGIwAADTQmKgEAAQUohpKwR9z9QzwBAQImKgEAAQXFa8RaDhAAAjwBAQImKgEAAQVkYYioxs+UyzwBAQIm",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_60"
      ]
    },
    {
      "name": "sha256_hash_100",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 100,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_100"
      ]
    },
    {
      "name": "pedersen_hash",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 10,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "5Z3dSiNLFIXfJde5qP1Tf77KcJCoGWkIicR44CC++6k4dk+wpYuB4F6buRFjyvi52FVrdf10v64etncvj7fD/ufheXXz43W1O9xvTsNh3169vq1Xd8dhtxseby9/vArnLxz5/Reenzb78+vn0+Z4Wt0QxVjXq+3+4f37rO1Dfg677eqG49t63rxwGFuXWKbGVL9ozGH6aA4pXDb+Z92AMhhQIjSgBAaU0RTKaAoVNIUKmkIVTaEKppCEgAYU0YAqGBCBeZkwWC8TRqshQetlomhAaL1M0RTSAgYUBQ3o+wdGkjgC0cUnfwAlRgNKYEAGIb8DhKZQQVOooClU0RSqYAppAFNIDUL+MhAFNCAFA2IwL1NG62WCVkOC1ssMQv4ykKL1MoOQvwxkEPI7QGgKoYV8TWCXQWoQ8lknICFebiwh5Y/GrW36RB9D8Uyv0TN9DJ7pS3ZMn1g90yfPY06qnsecLJ7HnJzZMX0xWK26Ir0mz/RFHNNX9uy1NXr22lo9ey0F8Wy2FJJntyUKnu2WSD37LVH2bLjE5NlxiV2bVsN33XVZfKvv+jqFWH2rbzD3flV816GBo+drFWLXcb/9xHXmsTgrcE181+sRDd+3bRXftlV821bxfblSfduW63l9kuDatiS4Dg1Crm1LfM80iO+ZBvE90yDs2rYsjttcFd+3banr0CDq27ai79AQfduW630wDd+3bWXfoSH7ti3fS3PiejtJw/cdGqpv26quQ4PFibWr4rsODRan4a6K7zo0KLm2LXW9b7zhu7YtFdehQcW3bfney6aut1+TRt+hIfq2reQ7NCTftpV8h4bs27ay79BQfNuW63OWpNW3bVXXoSEG17YVfR/+iAZ72URowheeERnsMJIqI1GbOZoTff/wpjpp1FL1Z6JksA+oRwSnEQkakcEOlh5RRCMyOMnYI0poRAqnkcLVUYTraxGujhLcCGlwELhDZLAC3yOqaEQFTqMCV0cGq9kxT0RpnvyTwWVjEp6INH4mygZLJz2igkZkcGizQ2Qw6d8jgqtsg+OGPaKMRpThNMpodVQIbYQshDZCFkYbIYugjZBF4Cpb0Xp/UbQRskQ4jeCctiS4vgbntCXDjZAG17QdohLRiGqAI8LTCK2OajBIbHlazcosc6KMRkQMRwSnEcNpxHAaCZxGAqeRwmmkcBpZXPdfEs3maqvBM8g6RAZpZHnfiMUtfCXrRFS+IKpYRBwCmEaN6PvnjySm30Sy3FjStKwjbZ1ruXEJYxQslz0mf9E06ahKinLZ9F0Ug2k+B6L8pZVSxo9tq5ozUfgvrZQyAucwrxQGr5ScRmuVEmg2JBpMzv4ZfsxL+Aa7k/4MX+siPrr6y/hRfeNX1/gGO6pEp5wuUeZEBY3IYPa5Q2RwddUjSmhEBvuXekQZjIgCmkYU0OqICK2vEcHVEaONkGRw98cOkcGjIzpEBk+D6BHhaQRXRxEtsZHBkxU0jB/NynVGZHAPwA6RwW39ekR4GlU0IotzAh0iOI0qnEYGt8xfJmKDPRU9IjiNCE4ji5y9dK6bmcFOmrPF89x6RBGNyGJ+uUOU0IginEYRro4SnEYWc7XLRBluhDRItR0ig1TbI4LTCO2eLmzxIKhlIglodWTxvKMeEZrTisG+3B4RWs4WgdNI4OpIoZL/W3v17+Y4bO522+f2O+c3X/b3p+Gw/3h5+u9pfOfuOOx2w+Pt0/Fwv314OW5vd4f783ur8PHlh1BZi9T2n56NgHUt2r6nX2/xWii3P9n+7P8=",
      "brillig_names": [
        "pedersen_hash"
      ]
    },
    {
      "name": "sha256_hash_20",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "data",
            "type": {
              "kind": "array",
              "length": 20,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICFJwAABAMnAgIEFCcCAwQAHxgAAwACgFEdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAigCAAEEgFEnAgMEFC0IAQInAgQEFQAQAQQBJwMCBAEAKAICBC4EAAGAAy4EAASABC4EAAOABSUAAAEyLQwCASUAAAF4JQAAAnYAKAECAigCAAMEgGUnAgQEIC4EAAKAAy4EAAOABC4EAASABSUAAAEyKAIAAgSAZScCAwQgOw0AAgADAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAAF3LgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAAAFGJikAgEMEagnmZykAgEQEu2euhSkAgEUEPG7zcikAgEYEpU/1OikAgEcEUQ5SfykAgEgEmwVojCkAgEkEH4PZqykAgEoEW+DNGS4AAAGASygAgEwEAAkBAAABgEwAASgBgEsEAAEBAIBLAAKATC4AgEyATS4CgEOATQEAgE0AAoBNLgKARIBNAQCATQACgE0uAoBFgE0BAIBNAAKATS4CgEaATQEAgE0AAoBNLgKAR4BNAQCATQACgE0uAoBIgE0BAIBNAAKATS4CgEmATQEAgE0AAoBNLgKASoBNKACATAQABCgAgE0EABAoAIBOBAAOKACATwQBACgAgFAEAAMmJQAAC0AtDQECACgCAgItDgIBJwICBAAtCAEDJwIEBBEAEAEEAScDAwQBACgDAgQnAgUEEAA4BQQFLQwEBgw4BgUHFgwHByQCAAcAAALSLQ4CBgAoBgIGIwAAArMtCAEEAAABAgEtDgMELQgBAwAAAQIBJwIFBAUtDgUDJwIGAQEkAgAGAAADESMAAAMDJwIHBAYtDgcDIwAAAxEtDQMIJwIDBBQnAgkEAScCCgIAJwILAggtDAIHIwAAAzIMOAcIDCQCAAwAAAoMIwAAA0QtDQQDLQ0DBAAoBAIELQ4EAycCBAEAJAIABAAAA3AjAAADZy0MAgEjAAADiwo4BAYHJAIABwAAA4IlAAALaS0MAgEjAAADiyQCAAYAAAOhIwAAA5gtDAIEIwAAA7MpAgAHBIAAAAAtDAcEIwAAA7MAOAEEDA44AQwNJAIADQAAA8olAAALey4EAAOAAygAgAQEABElAAALjS4IgAUAAQAoAQIEADgEBQ0tDgwNJAIABgAABEQjAAAD/S0NAQMAKAMCAy0OAwEtCAEDJwIEBAkAEAEEAScDAwQBACgBAgQBIIBLAAIABQAoAwIMQD8ADAAFAAQtDAMHLQwCCCMAAARYJwIDBBUuCIBLAActDAMIIwAABFgtDQcDACgDAgMtDgMHLQ0BAwAoAwIDLQ4DAS0IAQMAAAECAS0OAQMtCAEEAAABAgEtDggEJwIMBAQGOAgMDQQ4DQwOAjgIDgUKOAUCDCQCAAwAAAXLIwAABLIHKAAIgEwADQMwgEwABQAODygABYBMAA8kAgAPAAAE1yUAAAwbDSgADYBNAAUkAgAFAAAE7CUAAAwtACgBAg8AOA8NEC0NEAUcDA4QAhwMEA8EHAwPEAIEOAsQDycCEgIACjgSEBEkAgARAAAFNwY4DxAUCjgUCxMkAgATAAAFNyUAAAw/GjgFDxEnAgUCBAw4EAUSJAIAEgAABVwjAAAFUy0MAgwjAAAFgRg4EQ8FJwIQAiAMOA8QESQCABEAAAV4JQAAC2ktDAUMIwAABYEuBAABgAMoAIAEBAARJQAAC40uCIAFAAUAKAUCDwA4Dw0QLQ4MEC0OBQMAOAgOAQ44CAEFJAIABQAABcIlAAALey0OAQQjAAAFyy0NBAUHKAAFgEwABC0MBAEjAAAF4A0oAAGATgAEJAIABAAACbsjAAAF9ScCBAKgLQgBBScCCAQJABABCAEnAwUEAQAoBQIILQwIDC0OCgwAKAwCDC0OCgwAKAwCDC0OCgwAKAwCDC0OCgwAKAwCDC0OCgwAKAwCDC0OCgwAKAwCDC0OCgwAKAwCDC0OBAwnAgQEAicCCAQILQwCASMAAAZsDDgBBAwkAgAMAAAIKiMAAAZ+LQ0DBC0IAQMAAAECAS0IAQUnAgsEIQAQAQsBJwMFBAEAKAUCCycCDAQgADgMCwwtDAsNDDgNDA4WDA4OJAIADgAABtAtDgoNACgNAg0jAAAGsS0IAQoAAAECAS0OBQotDQcFACgFAgUtDgUHLQgBBScCCwQJABABCwEnAwUEAQAoBAILACgHAgwAKAUCDUA/AA0ADAALLQ4FAycCBAQgLQwCASMAAAcmDDgBCAUkAgAFAAAHPSMAAAc4LQ0KASYtDQMHACgHAgwAOAwBDS0NDQscDAsHACcCDAEALQgBCycCDQQFABABDQEnAwsEAQAoCwINJwIOBARDA7AAB4BPAA4ADAANBTCATAABAActDAIFIwAAB5QNKAAFgEwADCQCAAwAAAe3IwAAB6kAOAEJBS0MBQEjAAAHJi0NCgwAOAcFDQ44Bw0OJAIADgAAB9IlAAALewAoCwIPADgPBRAtDRAODDgNBA8kAgAPAAAH8iUAAAwtLgQADIADKACABAQAISUAAAuNLgiABQAPACgPAhAAOBANES0ODhEtDg8KADgFCQwtDAwFIwAAB5QFKAABgEwADC0NAw0BMIBOAAEADgw4DAgPJAIADwAACFAlAAAMLQAoBQIQADgQDBEtDREPADgMCRAOOAwQESQCABEAAAh1JQAAC3sMOBAIESQCABEAAAiHJQAADC0AKAUCEgA4EhATLQ0TEQA4DAQQDjgMEBIkAgASAAAIrCUAAAt7DDgQCBIkAgASAAAIviUAAAwtACgFAhMAOBMQFC0NFBIBKAAMgFAAEA44DBATJAIAEwAACOYlAAALeww4EAgMJAIADAAACPglAAAMLQAoBQITADgTEBQtDRQMHAwPEAQYOBALDxwMERAEADgPEBEOOA8REyQCABMAAAksJQAAC3sYOBELDxwMEhAEADgPEBEOOA8REiQCABIAAAlNJQAAC3sYOBELDxwMDBAEADgPEAwOOA8MESQCABEAAAluJQAAC3sNKAAOgE0ADyQCAA8AAAmDJQAADC0uBAANgAMoAIAEBAARJQAAC40uCIAFAA8AKA8CEAA4EA4RLQ4MES0ODwMAOAEJDC0MDAEjAAAGbC0NAwQNKAABgE0ABSQCAAUAAAnUJQAADC0uBAAEgAMoAIAEBAARJQAAC40uCIAFAAUAKAUCCAA4CAEMLQ4CDC0OBQMAOAEJBC0MBAEjAAAF4C0IAQ0AAAECAS0OAg0FKAAHgEwADgcoAA6ATAAQCjgQBw8kAgAPAAAKOyUAAAw/LQwCDCMAAApEDSgADIBMAA8kAgAPAAAKriMAAApZLQ0EDC0NDQ4NKAAHgE0ADSQCAA0AAAp2JQAADC0uBAAMgAMoAIAEBAARJQAAC40uCIAFAA0AKA0CDwA4DwcQLQ4OEAA4BwkMLQ4NBC0MDAcjAAADMgA4DgwQDjgOEBEkAgARAAAKxSUAAAt7DDgQAxEkAgARAAAK4CMAAArXLQwKDyMAAAsJDDgQAxEkAgARAAAK8iUAAAwtACgBAhIAOBIQEy0NExEtDBEPIwAACwktDQ0QGDgQCxEcDA8QBAA4ERAPDjgRDxIkAgASAAALLiUAAAt7LQ4PDQA4DAkPLQwPDCMAAApEKACABAR4AA0AAACABIADJACAAwAAC2gqAQABBfeh86+lrdTKPAEBAiYqAQABBclvkzsTnekWPAEBAiYqAQABBUWnynEZQeQVPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAuoIwAAC7MuAIADgAUjAAAMGi4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAwGLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAvVKAGABQQAAQMAgAYAAoAGIwAADBomKgEAAQUohpKwR9z9QzwBAQImKgEAAQXFa8RaDhAAAjwBAQImKgEAAQVkYYioxs+UyzwBAQIm",
      "debug_symbols": "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",
      "brillig_names": [
        "sha256_hash_20"
      ]
    }
  ],
  "outputs": {
    "globals": {},
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 511,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_511_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_511_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 512,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_512_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_512_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 60,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_60_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_60_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 20,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_20_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_20_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 30,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_30_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_30_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 90,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_90_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_90_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 100,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_100_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_100_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 255,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_255_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_255_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 256,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_256_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_256_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 2048,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_2048_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_2048_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 10,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_10_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_10_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 10,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::pedersen_hash_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::pedersen_hash_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 10,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::poseidon2_hash_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::poseidon2_hash_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 10,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::keccak_hash_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::keccak_hash_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 25,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 64
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::keccak_f1600_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 25,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::keccak_f1600_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 50,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_50_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_50_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 10,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::pedersen_hash_with_index_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::pedersen_hash_with_index_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 70,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_70_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_70_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 80,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_80_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_80_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "data",
                    "type": {
                      "kind": "array",
                      "length": 40,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AvmGadgetsTest::sha256_hash_40_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AvmGadgetsTest::sha256_hash_40_abi"
        }
      ]
    }
  },
  "file_map": {
    "137": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "335": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "354": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "364": {
      "path": "/home/aztec-dev/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "366": {
      "path": "/home/aztec-dev/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr",
      "source": "mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "60": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "62": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "88": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "95": {
      "path": "/home/aztec-dev/aztec-packages/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    }
  }
}
